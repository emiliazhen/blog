import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as l}from"./app-fd217ae5.js";const e={},o=l(`<ul><li>所有东西都是对象，每一个对象是类的实例，无论是数字、字符串、类还是函数</li><li>强类型语言，但也只是<code>var</code>声明，因为<code>Dart</code>会推断变量类型</li><li>支持通用类型，比如<code>List&lt;Map&lt;String,String&gt;&gt;</code>也可以写成<code>List&lt;Map&lt;String,dynamic&gt;&gt;</code></li><li>运行从<code>main</code>函数开始，支持绑定到类或者对象函数</li><li>没有空开，私有关键字，但是可以通过对象里下划线开头去定义一个变量，为私有变量</li></ul><p>支持数据类型</p><ul><li>number</li><li>string</li><li>boolean</li><li>list</li><li>map</li><li>rune</li><li>symbol</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;"> d </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.42e5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// 方法abs() ceil() floor()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// String -&gt; int</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> one </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">assert</span><span style="color:#ABB2BF;">(one </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// String -&gt; double</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> onePointOne </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1.1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">assert</span><span style="color:#ABB2BF;">(onePointOne </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// int -&gt; String</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> oneAsString </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">assert</span><span style="color:#ABB2BF;">(oneAsString </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// double -&gt; String</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> piAsString </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3.14159</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toStringAsFixed</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">assert</span><span style="color:#ABB2BF;">(piAsString </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;3.14&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;string interpolation&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">///创建多行字符串的方法:使用带有单引号或双引号的三重引号:</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> s2 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;&quot;This is also a</span></span>
<span class="line"><span style="color:#98C379;">multi-line string.&quot;&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;当前文字为$</span><span style="color:#E06C75;font-style:italic;">s2</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;当前文字为\${</span><span style="color:#E06C75;font-style:italic;">s2</span><span style="color:#98C379;">.</span><span style="color:#E06C75;font-style:italic;">toUpperCase</span><span style="color:#98C379;">}&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// raw字符串（前缀为r） 避免转义作用</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">r&quot;换行符：\\n&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">/// 换行符: \\n</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">///只有两个对象具有bool类型：布尔字面量true和false，它们都是编译时常量</span></span>
<span class="line"><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> isLogin </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> hasMore </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">///在Dart中，数组是列表对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> list </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">///创建一个编译时常量列表，要在列表字面量之前添加const</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;">&gt; constantList </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// constantList</span><span style="color:#E06C75;font-style:italic;">[1]</span><span style="color:#7F848E;font-style:italic;"> = 1; // Uncommenting this causes an error.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// Map 在Dart中不是映射，而是对象</span></span>
<span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;"> gifts </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/// Key: Value</span></span>
<span class="line"><span style="color:#98C379;">&#39;first&#39;</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;partridge&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&#39;second&#39;</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;turtledoves&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&#39;fifth&#39;</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;golden rings&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;"> gifts </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">gifts[</span><span style="color:#98C379;">&#39;first&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;partridge&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">gifts[</span><span style="color:#98C379;">&#39;second&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;turtledoves&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">gifts[</span><span style="color:#98C379;">&#39;fifth&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;golden rings&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">gifts.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;first&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量和常量" tabindex="-1"><a class="header-anchor" href="#变量和常量" aria-hidden="true">#</a> 变量和常量</h2><p>对象不限于单一类型(没有明确的类型)，使用<code>Object</code>或<code>dynamic</code>关键字</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;zs&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">dynamic</span><span style="color:#ABB2BF;"> name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;ls&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>final</code>或<code>const</code>修饰的变量，变量类型可以省略，并无法再去修改其值</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;ww&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常量如果是类级别的 使用<code>static const</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> speed </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <code>?.</code></h3><p><code>?.</code> 像 <code>.</code> 一样，但最左边的操控数可以为空</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">.member</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="级联符号" tabindex="-1"><a class="header-anchor" href="#级联符号" aria-hidden="true">#</a> ..级联符号</h3><p>允许你在同一个对象上进行一系列操作</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">StringBuffer</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    ..</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;test1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  ..</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;test2&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a> <code>??</code></h3><p>三目运算符的一种形式</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/// 如果exp1非空则返回其值，否则返回exp2</span></span>
<span class="line"><span style="color:#ABB2BF;">exp1 </span><span style="color:#C678DD;">??</span><span style="color:#ABB2BF;"> exp2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a> <code>~/</code></h3><p>除法取商</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">~/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">/// 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>%取模</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#D19A66;">15</span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">/// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="as-is-和-is" tabindex="-1"><a class="header-anchor" href="#as-is-和-is" aria-hidden="true">#</a> <code>as</code> <code>is</code> 和 <code>is!</code></h2><ul><li><code>as</code>判断属于某种类型</li><li><code>is</code>如果对象具有指定类型 则为<code>true</code></li><li><code>is!</code> 如果对象具有指定类型 则为<code>false</code></li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;"> funs </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;构造函数 Test&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fun</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Test fun函数&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test2</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">Test2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;构造函数 Test2&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fun</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Test2 fun函数&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(test2 is </span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(test is</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#ABB2BF;">(test2 </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Test2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">fun</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Test2 fun函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 相当于</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// if (test2 is Test) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// test2.fun();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><ul><li>可选参数</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">({</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> bold,</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> hidden}){..}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可选的位置参数 在<code>[]</code>中包装一组函数参数，标记为可选 的位置参数</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> from,</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> msg,[</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> device]){...}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>默认参数值</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">({</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> bold </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> hidden </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">}){...}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><p>为避免最左操作数为空时出现异常，使用<code>?.</code>代替<code>.</code>来使用 <code>p?.y =4</code> 获取对象类型</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">xxx.runtimeType</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>工厂构造函数，使用<code>factory</code>关键字，该构造函数并不总是创建类的新实例</p><h3 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> 枚举类型</h3><p>使用<code>enum</code>关键字声明一个枚举类型</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">{red,green,blue}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>枚举中的每个值都有一个索引<code>getter</code>，它返回<code>enum</code>声明中值从<code>0</code>开始的位置</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">.red.index </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要获取枚举中所有值的列表，使用<code>enum</code>的<code>values</code>常量</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">&gt; colors </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">.values;</span></span>
<span class="line"><span style="color:#C678DD;">assert</span><span style="color:#ABB2BF;">(colors[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">.blue);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子类超类" tabindex="-1"><a class="header-anchor" href="#子类超类" aria-hidden="true">#</a> 子类超类</h3><p>使用<code>extends</code>来创建一个子类，并<code>super</code>来引用超类</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Television</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">turnOn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">_illuminateDisplay</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">_activateIrSensor</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ···</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">SmartTelevision</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Television</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">turnOn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">turnOn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">_bootNetworkInterface</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">_initializeMemory</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">_upgradeApps</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ···</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类可以覆盖实例方法，<code>getter</code>,<code>setter</code>，可以使用<code>@override</code>标注想要覆盖的成员</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">SmartTelevision</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Television</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">@override</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">turnOn</span><span style="color:#ABB2BF;">() {...}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ···</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Mixins</code>可以多个类的层级中重复的使用类的代码，要使用<code>mixin</code>使用<code>with</code>关键字后面跟上一个或者多个<code>mixin</code>名字</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Maestro</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">with</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Musical</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Aggressive</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Demented</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#E5C07B;">Maestro</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> maestroName) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> maestroName;</span></span>
<span class="line"><span style="color:#ABB2BF;">        canConduct </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现<code>mixin</code>，创建一个类继承<code>Object</code>并且声明没有构造函数。除非你想要你的<code>mixin</code>当做一个标准类可以使用，要不使用<code>mixin</code>关键字来代替<code>class</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">mixin</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Musical</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> canPlayPiano </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> canCompose </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> canConduct </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">entertainMe</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (canPlayPiano) {</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Playing piano&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (canConduct) {</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Waving hands&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Humming to self&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态变量" tabindex="-1"><a class="header-anchor" href="#静态变量" aria-hidden="true">#</a> 静态变量</h3><p>对于类范围的状态和常量是有用的，静态变量直到他们被使用的时候才会初始化</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Queue</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> initialCapacity </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ···</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态方法，不能操作一个实例变量，并且不能够访问<code>this</code>。可以使用静态方法当做编译期常量</p><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>泛型通常是类型安全锁必须的，他们对于写出严谨高质量的代码是很有用的</p><h2 id="库" tabindex="-1"><a class="header-anchor" href="#库" aria-hidden="true">#</a> 库</h2><p><code>import</code>和<code>library</code>指令可以创建模块化和可共享的代码库。使用 import 来指定如何在另一个库的范围中使用来自一个库的命名空间</p><h3 id="懒加载库" tabindex="-1"><a class="header-anchor" href="#懒加载库" aria-hidden="true">#</a> 懒加载库</h3><p>延迟加载(也称为懒加载)允许应用程序在需要时按需加载库，减少应用程序的初始启动时间，加载很少使用的功能如可选屏幕和对话框 要延时加载库必须首先使用<code>deferred as</code>进行导入</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;package:...&#39;</span><span style="color:#ABB2BF;"> deferred </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> xxx;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当需要库时，使用库的标识符调用<code>loadLibrary()</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Future</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">greet</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> hello.</span><span style="color:#61AFEF;">loadLibrary</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">hello.</span><span style="color:#61AFEF;">printGreeting</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在导入文件中，递延库的常量不是常量。不能在导入文件中使用来自延迟库的类型。<code>Dart</code>隐式的将<code>loadLibrary()</code>插入到定义使用<code>deferred</code>作为名称空间的名称空间中，函数的作用是返回一个<code>Future</code></p><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h2><p><code>async</code>和<code>await</code>关键字支持异步编程，允许编写类似于同步代码的异步代码</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Future</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">checkVersion</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">version </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">lookupVersion</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (e) {</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在异步函数中多次使用<code>await</code><br> 在<code>await</code>表达式中，表达式的值通常是一个<code>Future</code>对象，如果不是那么这个值将被自动包装成<code>Future</code>。<code>Future</code>对象指示返回结果移动是一个对象。表达式的值就是被返回的对象。<code>await</code>表达式会让程序执行挂起，直到返回的对象可用</p><h2 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> DateTime</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">DateTime</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> berlinWallFell </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">DateTime</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">utc</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1989</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> moonLanding </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">DateTime</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1969-07-20 20:18:04z&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">berlinWallFell.year;</span></span>
<span class="line"><span style="color:#ABB2BF;">berlinWallFell.month;</span></span>
<span class="line"><span style="color:#ABB2BF;">berlinWallFell.day;</span></span>
<span class="line"><span style="color:#ABB2BF;">berlinWallFell.weekday;</span></span>
<span class="line"><span style="color:#ABB2BF;">berlinWallFell.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">(days</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,hours</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> diff </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> berlinWallFell.</span><span style="color:#61AFEF;">difference</span><span style="color:#ABB2BF;">(moonLanding);</span></span>
<span class="line"><span style="color:#ABB2BF;">diff.inDays; </span><span style="color:#7F848E;font-style:italic;">//7416</span></span>
<span class="line"><span style="color:#ABB2BF;">diff.inHours; </span><span style="color:#7F848E;font-style:italic;">//177987</span></span>
<span class="line"><span style="color:#ABB2BF;">diff.inMinutes; </span><span style="color:#7F848E;font-style:italic;">//10679261</span></span>
<span class="line"><span style="color:#ABB2BF;">moonLanding.</span><span style="color:#61AFEF;">isAfter</span><span style="color:#ABB2BF;">(berlinWallFell);</span></span>
<span class="line"><span style="color:#ABB2BF;">moonLanding.</span><span style="color:#61AFEF;">isBefore</span><span style="color:#ABB2BF;">(berlinWallFell);</span></span>
<span class="line"><span style="color:#ABB2BF;">berlinWallFell.</span><span style="color:#61AFEF;">compareTo</span><span style="color:#ABB2BF;">(berlinWallFell); </span><span style="color:#7F848E;font-style:italic;">// 0相等 -1不相等</span></span>
<span class="line"><span style="color:#ABB2BF;">berlinWallFell.</span><span style="color:#61AFEF;">subtract</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">(hours</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, minutes</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">41</span><span style="color:#ABB2BF;">, seconds</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">56</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">moonLanding.</span><span style="color:#61AFEF;">toLocal</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// =&gt; 1969-07-20 21:18:04.000</span></span>
<span class="line"><span style="color:#ABB2BF;">moonLanding.</span><span style="color:#61AFEF;">toUtc</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// =&gt; 1969-07-20 20:18:04.000Z</span></span>
<span class="line"><span style="color:#ABB2BF;">moonLanding.timeZoneName; </span><span style="color:#7F848E;font-style:italic;">// =&gt; UTC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h2><ul><li><code>if else;</code> 不同于<code>js</code>,条件必须使用<code>boolean</code>值</li><li><code>for;</code> <code>dart</code>中闭包<code>for</code>循环捕获了索引值避免了在<code>JS</code>中类似的陷进</li><li><code>forEach</code></li><li><code>for..in</code></li><li><code>while</code></li><li><code>do..while</code></li><li><code>switch..case</code></li></ul><h2 id="throw-xxx-抛出异常" tabindex="-1"><a class="header-anchor" href="#throw-xxx-抛出异常" aria-hidden="true">#</a> throw &#39;XXX&#39; 抛出异常</h2><p><code>try..catch</code><br> 为确保一些代码可以无论异常是否抛出而运行可以<code>try..finally</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">breedMoreLlamas</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (e) {</span></span>
<span class="line"><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Error: $</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Handle the exception first.</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">cleanLlamaStalls</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Then clean up.</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;"> testList </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//固定长度的List</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.length </span><span style="color:#7F848E;font-style:italic;">//返回长度</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.isEmpty </span><span style="color:#7F848E;font-style:italic;">//返回是否为空</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.isNotEmpty </span><span style="color:#7F848E;font-style:italic;">//返回是否有元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.first </span><span style="color:#7F848E;font-style:italic;">//获取第一个元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.last </span><span style="color:#7F848E;font-style:italic;">//获取最后一个元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">((a,b) =&gt; a.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().length.</span><span style="color:#61AFEF;">compareTo</span><span style="color:#ABB2BF;">(b.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().length))</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.reversed </span><span style="color:#7F848E;font-style:italic;">//返回List倒序排列的Iterable不改变原List</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">//清空数组</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;111&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//添加元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">addAll</span><span style="color:#ABB2BF;">(testList2) </span><span style="color:#7F848E;font-style:italic;">//添加全部元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;value&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//向指定位置添加元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">insertAll</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,[</span><span style="color:#98C379;">&#39;v&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;l&#39;</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">//向指定位置添加</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;value&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//删除指定元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">removeLast</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">//删除最后一个元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">removeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//删除指定位置元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">removeRange</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//删除指定区域元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">removeWhere</span><span style="color:#ABB2BF;">((item)=&gt; item.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().length </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//将满足条件的全部删除</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">setRange</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,tmpList,</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//设置元素，tmpList个数不够会报错，个数大于需要替换的个数可以设置第四个参数表示跳过前面的几个元素开始取值，默认为0</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">replaceRange</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,tmpList) </span><span style="color:#7F848E;font-style:italic;">//替换元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">fillRange</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,item) </span><span style="color:#7F848E;font-style:italic;">//使用一个值item替换指定位置的全部值</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">setAll</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,tmpList)</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">sublist</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//截取</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">retainWhere</span><span style="color:#ABB2BF;">((item) =&gt; item.v </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//将满足条件的元素保留下来，不满足的删除</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;aaaa&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//查看元素出现的位置，没有找到返回-1，第二个参数可以指定查找范围</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">lastIndexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;bbbb&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//查看元素最后出现的位置，第二个参数为最后一个元素到指定位置的范围</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">indexWhere</span><span style="color:#ABB2BF;">((e) =&gt; </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//返回第一个满足条件的元素index</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">firstWhere</span><span style="color:#ABB2BF;">((e)=&gt; </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//返回第一个满足条件的元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">lastWhere</span><span style="color:#ABB2BF;">((e)=&gt; </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//从后往前找，返回第一个满足条件的元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">lastIndexWhere</span><span style="color:#ABB2BF;">((e) =&gt; </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//从后向前找第一个满足条件的元素index</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;">((item) =&gt; item.v </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//遍历查询有没有满足条件的数据，有返true，无返false</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">every</span><span style="color:#ABB2BF;">((item) =&gt; item.v </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//遍历查询是否所有都满足这个条件</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; testStringList </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> testList.</span><span style="color:#61AFEF;">cast</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;() </span><span style="color:#7F848E;font-style:italic;">//查看list中的数据类型是不是都是指定的数据类型，如果发现List中存在不为指定泛型的数据类型就会报错</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;aaa&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//查看是否存在指定元素</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((e) =&gt;{}) </span><span style="color:#7F848E;font-style:italic;">//遍历每个元素，此时不能add或remove否则报错，可以修改元素</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">//遍历每个元素并做处理返回一个新的Iterable</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">take</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//从0开始取2个元素并返回</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">takeWhere</span><span style="color:#ABB2BF;">((e) =&gt; e</span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//从0开始取，直至第一个不符合函数的元素，将前面的元素都返回</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">where</span><span style="color:#ABB2BF;">((e) =&gt; </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//根据指定参数函数筛选每个元素，符合条件的元素组成一个新的Iterable</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">singleWhere</span><span style="color:#ABB2BF;">((e) =&gt; </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">, orElse</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;">()=&gt;{}) </span><span style="color:#7F848E;font-style:italic;">// 找到唯一满足条件的元素，如果没有满足的或有多个满足的元素就返回orElse的返回值</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">fold</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,(a,e)=&gt;(a</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">e)) </span><span style="color:#7F848E;font-style:italic;">//2*(1*2*3) 指定一个参数函数规则，对每个元素做操作并返回结果</span></span>
<span class="line"><span style="color:#ABB2BF;">testList.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((a,b)=&gt;a</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">b) </span><span style="color:#7F848E;font-style:italic;">//1+2+3 用指定方法对元素做连续操作并返回结果</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="timer" tabindex="-1"><a class="header-anchor" href="#timer" aria-hidden="true">#</a> Timer()</h2><p>延时处理，<code>参数1</code>是时间值，<code>参数2</code>是回调函数</p>`,85),p=[o];function c(t,r){return n(),a("div",null,p)}const d=s(e,[["render",c],["__file","dart.html.vue"]]);export{d as default};
