import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,a as e}from"./app-fd217ae5.js";const l={},o=e(`<h2 id="函数的返回值" tabindex="-1"><a class="header-anchor" href="#函数的返回值" aria-hidden="true">#</a> 函数的返回值</h2><p>返回值就是函数执行完毕的结果 <code>return</code> 要返回的内容<br> 如果函数没有写<code>return</code>, 默认会返回一个<code>undefined</code><br><code>return</code>后面什么也不写, 默认会返回一个<code>undefined</code><br><code>return</code>会结束整个函数的执行, 一个函数只能有一个返回值<br><code>return</code>与<code>break</code>的区别: <code>break</code>: 结束整个循环的执行 <code>return</code>: 结束整个函数的执行</p><h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> arguments</h2><p>所有的函数都有一个内置对象: arguments<br> 该对象存储了函数执行时, 传入的所有实参<br> 以伪数组的形式存储<br> 伪数组: 具有索引和 length 属性, 但不是数组的对象</p><p>如果函数调用时没有传实参，那么形参的值为<code>undefined</code> 如果函数调用时传入的实参个数大于形参个数，多余的参数会被“舍弃”，在<code>auguments</code>里</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">sun</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">57</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的了解内容" tabindex="-1"><a class="header-anchor" href="#函数的了解内容" aria-hidden="true">#</a> 函数的了解内容</h2><ol><li>匿名函数 没有名字的函数<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>函数也是一种数据 变量可以是基本数据类型,例如 <code>number</code> <code>string</code><code>number</code> 和 <code>string</code> 这些基本数据类型可以作为参数传递到函数中 函数也可以作为参数传递到函数中使用<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {}</span></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 也可以将 fn 传入 test 函数</span></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>同理, 也可以把函数作为返回值来使用</li></ol><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><h3 id="全局作用域" tabindex="-1"><a class="header-anchor" href="#全局作用域" aria-hidden="true">#</a> 全局作用域</h3><p>在全局作用域中声明的变量, 叫 <code>全局变量</code>, 在任何地方都可以使用 局部作用域(函数作用域) 在局部作用域中声明的变量, 叫 <code>局部变量</code>, 只能在当前作用域中使用 因为在 JS 中, 只有函数可以独立开辟一块作用域</p><h3 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域" aria-hidden="true">#</a> 块级作用域</h3><p>何一对花括号<code>（｛</code>和<code>｝）</code>中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。在 es5 之前没有块级作用域的的概念,只有函数作用域，现阶段可以认为 JavaScript 没有块级作用域</p><h3 id="预解析" tabindex="-1"><a class="header-anchor" href="#预解析" aria-hidden="true">#</a> 预解析</h3><p>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。 把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。 先提升 <code>var</code>，再提升 <code>function</code>。</p><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链" aria-hidden="true">#</a> 作用域链</h3><p>在局部作用域中访问变量时, 先找当前作用域中是否存在该变量, 如果存在直接使用(就近原则), 如果当前作用域中没有该变量, 会往上级作用域中查找</p>`,17),c=[o];function r(p,t){return a(),n("div",null,c)}const B=s(l,[["render",r],["__file","函数和作用域.html.vue"]]);export{B as default};
