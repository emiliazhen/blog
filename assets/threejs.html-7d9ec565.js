import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as p,b as s,d as c,e as r,a as n}from"./app-fd217ae5.js";const B={},t=n('<h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><p><code>Three.js</code>作为<code>WebGL</code>框架中的佼佼者，由于它的易用性和扩展性，使得它能够满足大部分的开发需求。<br><code>Three.js</code>掩盖了<code>3D</code>渲染的细节：<code>Three.js</code>将<code>WebGL</code>原生<code>API</code>的细节抽象化，将<code>3D</code>场景拆解为网格、材质和光源(即它内置了图形编程常用的一些对象种类)。</p><ul><li>面向对象：开发者可以使用上层的<code>JavaScript</code>对象，而不是仅仅调用<code>JavaScript</code>函数。</li><li>功能非常丰富：<code>Three.js</code>除了封装了<code>WebGL</code>原始<code>API</code>之外，<code>Three.js</code>还包含了许多实用的内置对象，可以方便地应用于游戏开发、动画制作、幻灯片制作、髙分辨率模型和一些特殊的视觉效果制作。</li><li>速度很快：<code>Three.js</code>采用了<code>3D</code>图形最佳实践来保证在不失可用性的前提下，保持极高的性能。</li><li>支持交互：<code>WebGL</code>本身并不提供拾取（<code>picking</code>)功能（即是否知道鼠标正处于某个物体上）。而<code>Three.js</code>则固化了拾取支持，这就使得你可以轻松为你的应用添加交互功能。</li><li>包含数学库：<code>Three.js</code>拥有一个强大易用的数学库，你可以在其中进行矩阵、投影和矢量运算。</li><li>内置文件格式支持：你可以使用流行的 3D 建模软件导出文本格式的文件，然后使用<code>Three.js</code>加载；也可以使用<code>Three.js</code>自己的<code>JSON</code>格式或二进制格式。</li><li>扩展性很强：为<code>Three.js</code>添加新的特性或进行自定义优化是很容易的事情。如果你需要某个特殊的数据结构，那么只需要封装到<code>Three.js</code>即可。</li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><p>官网文档非常粗糙，对于新手极度不友好。<br> 国内的相关资源匮乏。 <code>Three.js</code>所有的资料都是以英文格式存在，对国内的朋友来说又提高了门槛。 <code>Three.js</code>不是游戏引擎，一些游戏相关的功能没有封装在里面，如果需要相关的功能需要进行二次开发。</p><h2 id="与babylon-js对比" tabindex="-1"><a class="header-anchor" href="#与babylon-js对比" aria-hidden="true">#</a> 与<code>Babylon.js</code>对比</h2><p><code>Babylon.JS</code>是最好的<code>JavaScript3D</code>游戏引擎，它能创建专业级三维游戏。主要以游戏开发和易用性为主。与<code>Three.js</code>之间的对比：</p><ul><li><code>Three.js</code>比较全面，而<code>Babylon.js</code>专注于游戏方面。</li><li><code>Babylon.js</code>提供了对碰撞检测、场景重力、面向游戏的照相机，<code>Three.js</code>本身不自带，需要依靠引入插件实现。</li><li>对于<code>WebGL</code>的封装，双方做的各有千秋，<code>Three.js</code>浅一些，好处是易于扩展，易于向更底层学习；<code>Babylon.js</code>深一些，好处是易用扩展难度大一些。</li><li><code>Three.js</code>的发展是依靠社区推动，出来的比较早，发展比较成熟，<code>Babylon.js</code>是由微软公司在<code>2013</code>推出，文档和社区都比较健全，国内还不怎么火。</li></ul>',8),i={href:"https://threejs.org/editor/",target:"_blank",rel:"noopener noreferrer"},d=n(`<p>使用<code>Three.js</code>显示创建的内容，我们必须需要的三大件是：渲染器，相机和场景。相机获取到场景内显示的内容，然后再通过渲染器渲染到画布上面。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">onload</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;</span><span style="color:#61AFEF;">init</span><span style="color:#98C379;">()&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;https://cdn.bootcss.com/three.js/92/three.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//声明一些全局变量</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">renderer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">camera</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">scene</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">geometry</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">material</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mesh</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initRenderer</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">renderer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">THREE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">WebGLRenderer</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">//实例化渲染器</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">renderer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setSize</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHeight</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//设置宽和高</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">renderer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">domElement</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//添加到dom</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//初始化场景</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initScene</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">scene</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">THREE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Scene</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">//实例化场景</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//初始化相机</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initCamera</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">camera</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">THREE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">PerspectiveCamera</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">45</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHeight</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//实例化相机</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">camera</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">position</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//创建模型</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">initMesh</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">geometry</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">THREE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">BoxGeometry</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//创建几何体</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">material</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">THREE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">MeshNormalMaterial</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">//创建材质</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">mesh</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">THREE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Mesh</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">geometry</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">material</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//创建网格</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">scene</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mesh</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//将网格添加到场景</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//运行动画</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">animate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">requestAnimationFrame</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">animate</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//循环调用函数</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">mesh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rotation</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0.01</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">//每帧网格模型的沿x轴旋转0.01弧度</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">mesh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rotation</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0.02</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">//每帧网格模型的沿y轴旋转0.02弧度</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">renderer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scene</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">camera</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//渲染界面</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//初始化函数，页面加载完成是调用</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">initRenderer</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">initScene</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">initCamera</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">initMesh</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">animate</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ready</code>和<code>onload</code>的区别： <code>ready</code>加载完<code>js</code>和<code>css</code>就执行，<code>onload</code>必须加载完图片之后。</p><h2 id="创建渲染器" tabindex="-1"><a class="header-anchor" href="#创建渲染器" aria-hidden="true">#</a> 创建渲染器</h2><ol><li>我们实例化了一个 <code>THREE.WebGLRenderer</code>，这是一个基于 <code>WebGL</code> 渲染的渲染器，当然，<code>Three.js</code> 向下兼容，还有 <code>CanvasRenderer</code>，<code>CSS2DRenderer</code>，<code>CSS3DRenderer</code> 和 <code>SVGRenderer</code>，这四个渲染器分别基于 <code>canvas2D</code>,<code>CSS2D</code>，<code>CSS3D</code> 和 <code>SVG</code> 渲染的渲染器。由于，作为 <code>3D</code> 渲染，<code>WebGL</code> 渲染的效果最好，并且支持的功能更多，我们以后的课程也只会用到 <code>THREE.WebGLRenderer</code>，需要使用其他渲染器时，会重点提示。</li><li>调用了一个设置函数 <code>setSize</code> 方法，这个是设置我们需要显示的窗口大小。案例我们是基于浏览器全屏显示，所以设置了浏览器窗口的宽和高。</li><li><code>renderer.domElement</code>是在实例化渲染器时生成的一个 <code>canvas</code> 画布，渲染器渲染界面生成的内容，都将在这个画布上显示。所以，我们将这个画布添加到了 <code>dom</code> 当中，来显示渲染的内容。</li></ol><h2 id="创建相机" tabindex="-1"><a class="header-anchor" href="#创建相机" aria-hidden="true">#</a> 创建相机</h2><p><code>Three.js</code> 里面有几个不同的相机，我们这里使用到的是 <code>THREE.PerspectiveCamera</code>，这个相机的效果是模拟人眼看到的效果，就是具有透视的效果，近大远小。</p><ol><li>我们实例化了一个透视相机，需要四个值分别是视野，宽高比，近裁面和远裁面。我们分别介绍一下这四个值：</li></ol><ul><li><code>视野</code>：当前相机视野的宽度，值越大，渲染出来的内容也会更多。</li><li><code>宽高比</code>：默认是按照画布的显示的宽高比例来设置，如果比例设置的不对，会发现渲染出来的画面有拉伸或者压缩的感觉。</li><li><code>近裁面</code>和<code>远裁面</code>：这个是设置相机可以看到的场景内容的范围，如果场景内的内容位置不在这两个值内的话，将不会被显示到渲染的画面中。</li></ul><ol start="2"><li>设置了相机的位置 <code>WebGL</code> 坐标系统作为 <code>3D</code> 坐标，在原来的 <code>2D</code> 坐标 <code>xy</code> 轴上面又多了一个 <code>z</code> 轴，大家注意 <code>z</code> 轴的方向，是坐标轴朝向我们的方向是正轴，我们眼看去的方向是是 <code>z</code> 轴的负方向。 <code>camera.position.set</code> 函数是设置当前相机的位置，函数传的三个值分别是 <code>x</code> 轴坐标，<code>y</code> 轴坐标和 <code>z</code> 轴坐标。我们只是将相机的放到了 <code>z </code>正轴坐标轴距离坐标原点的 <code>15</code> 的位置。相机默认的朝向是朝向 <code>0</code> 点坐标的，我们也可以设置相机的朝向。</li></ol><h2 id="创建场景" tabindex="-1"><a class="header-anchor" href="#创建场景" aria-hidden="true">#</a> 创建场景</h2><p>场景只是作为一个容器，我们将需要显示的内容都放到场景对象当中。如果我们需要将一个模型放入到场景当中，则可以使用 scene.add 方法</p><h2 id="创建第一个模型" tabindex="-1"><a class="header-anchor" href="#创建第一个模型" aria-hidden="true">#</a> 创建第一个模型</h2><ol><li>我们实例化了一个 <code>THREE.BoxGeometry</code> 立方体的几何体对象，实例化的三个传值分别代表着立方体的长度，宽度和高度。我们全部设置的相同的值，将渲染出一个标准的正立方体。</li><li>我们实例化了一个 <code>THREE.MeshNormalMaterial</code> 材质，这种材质的特点是，它会根据面的朝向不同，显示不同的颜色。</li><li>通过 <code>THREE.Mesh</code>方法实例化创建了一个网格对象，<code>THREE.Mesh</code> 实例化需要传两个值，分别是几何体对象和材质对象，才可以实例化成功。</li><li>添加</li></ol><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h2><p>渲染的<code>render</code>方法需要两个值，第一个值是场景对象，第二个值是相机对象。这意味着，你可以有多个相机和多个场景，可以通过渲染不同的场景和相机让画布上显示不同的画面。<br> 每一个实例化的网格对象都有一个<code>rotation</code>的值，通过设置这个值可以让立方体旋转起来。在每一帧里，我们让立方体沿 x 轴方向旋转 0.01 弧度，沿 y 轴旋转 0.02 弧度（1π 弧度等于 180 度角度）。</p><h2 id="性能检测插件" tabindex="-1"><a class="header-anchor" href="#性能检测插件" aria-hidden="true">#</a> 性能检测插件</h2><p>现在<code>Three.js</code>常使用的一款插件叫<code>stats</code>。<br> 实例化一个<code>stats</code>对象，然后把对象内生成的<code>dom</code>添加到页面当中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">stats</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Stats</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stats</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 requestAnimationFrame 的回调里面进行更新每次渲染的时间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">animate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">requestAnimationFrame</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">animate</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//循环调用函数</span></span>
<span class="line"><span style="color:#ABB2BF;"> ......</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">stats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//更新性能插件</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">renderer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">scene</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">camera</span><span style="color:#ABB2BF;"> ); </span><span style="color:#7F848E;font-style:italic;">//渲染界面</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function y(F,A){const a=l("ExternalLinkIcon");return o(),p("div",null,[t,s("p",null,[s("a",i,[c("在线编辑器"),r(a)])]),d])}const m=e(B,[["render",y],["__file","threejs.html.vue"]]);export{m as default};
