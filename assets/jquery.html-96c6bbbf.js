import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,a as l}from"./app-fd217ae5.js";const t={},n=l(`<h2 id="页面加载事件" tabindex="-1"><a class="header-anchor" href="#页面加载事件" aria-hidden="true">#</a> 页面加载事件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 同window.onload,页面结构和外部资源全部加载完毕后执行</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {});​</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 页面结构加载完毕后就执行, 优先于load()事件之前执行, 推荐使用该方式</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">ready</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {});​</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 同$(document).ready(function(){});</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">jQuery</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {});​</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 因为jQuery等同于$   所以功能同上</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dom-对象和-jquery-对象之间互转" tabindex="-1"><a class="header-anchor" href="#dom-对象和-jquery-对象之间互转" aria-hidden="true">#</a> DOM 对象和 jQuery 对象之间互转</h2><p>DOM 对象：可以使用 WebAPI 提供的一些方法和属性<br> jQuery 对象：相当于对 DOM 对象的包装，使用 jQuery 提供的一些方法和属性，来操作 DOM 元素</p><ul><li>DOM 对象转为 jQuery 对象：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">DOM对象</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>jQuery 对象转为 DOM 对象：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">jQuery对象</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">jQuery对象</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h2><h3 id="id-选择器" tabindex="-1"><a class="header-anchor" href="#id-选择器" aria-hidden="true">#</a> ID 选择器</h3><p>获取元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#btn&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注册点击事件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#btn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改元素内部文本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#dv&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;内容“)</span><span style="color:#FFFFFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改元素的背景色</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;backgroundColor&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="标签选择器" tabindex="-1"><a class="header-anchor" href="#标签选择器" aria-hidden="true">#</a> 标签选择器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;p&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类选择器" tabindex="-1"><a class="header-anchor" href="#类选择器" aria-hidden="true">#</a> 类选择器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;.cls&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="交集选择器" tabindex="-1"><a class="header-anchor" href="#交集选择器" aria-hidden="true">#</a> 交集选择器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;p.cls&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="并集选择器" tabindex="-1"><a class="header-anchor" href="#并集选择器" aria-hidden="true">#</a> 并集选择器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;p,span,a,#btn&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="层次选择器" tabindex="-1"><a class="header-anchor" href="#层次选择器" aria-hidden="true">#</a> 层次选择器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv span&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv&gt;span&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv+span&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 获取ID为dv后面第一个兄弟元素span</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv~span&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 获取ID为dv后面所有兄弟元素span</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="奇数偶数选择器" tabindex="-1"><a class="header-anchor" href="#奇数偶数选择器" aria-hidden="true">#</a> 奇数偶数选择器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv&gt;ul&gt;li:even&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 获取索引为偶数的li元素</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv&gt;ul&gt;li:odd&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 获取索引为奇数的li元素</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引选择器" tabindex="-1"><a class="header-anchor" href="#索引选择器" aria-hidden="true">#</a> 索引选择器</h3><p>eq : equal gt : greater than lt : less than</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ul&gt;li:eq(7)&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">获取ul中索引为7的li元素</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ul&gt;li:gt(7)&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">获取ul中索引大于7的li元素</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ul&gt;li:lt(7)&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">获取ul中索引小于7的li元素</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果索引是变量则需要使用字符串拼接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ul&gt;li:eq(&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;)&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ul&gt;li&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">eq</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表单元素属性选择器" tabindex="-1"><a class="header-anchor" href="#表单元素属性选择器" aria-hidden="true">#</a> 表单元素属性选择器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#se&gt;option:selected&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 表示获取id为se下main所有selected属性为true的option</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv :checkbox&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 获取id为dv下所有类型为checkbox的表单元素</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv :checked&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 获取id为dv下所有checked为true的表单元素</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>属性选择器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv p[index=5]&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 获取id为dv下所有index属性为5的p标签</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h2><p>共同特性：传入参数表示设置，不传参数表示获取</p><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">text(}</td><td style="text-align:left;">相当于 <code>DOM</code> 中的 <code>innerText</code></td></tr><tr><td style="text-align:left;">html()</td><td style="text-align:left;">相当于 <code>DOM</code> 中的 <code>innerHTML</code></td></tr><tr><td style="text-align:left;">val()</td><td style="text-align:left;">相当于 <code>DOM</code> 中的 <code>value</code> 属性</td></tr><tr><td style="text-align:left;">css()</td><td style="text-align:left;">相当于 <code>DOM</code> 中的 <code>style</code> 属性，一般只用这个方法设置样式，不会用于获取<code>$(&quot;#dv&quot;).css(&quot;backgroundColor&quot;,&quot;yellow&quot;);$(&quot;#dv&quot;).css({&quot;width&quot;:&quot;300px&quot;,&quot;height&quot;:&quot;200px&quot;,&quot;backgroundColor&quot;:&quot;yellow&quot;});</code></td></tr><tr><td style="text-align:left;">children()</td><td style="text-align:left;">获取所有的直接子元素，可以传入参数进行过滤，例如需要所有的子元素 ul，children(&quot;ul&quot;);</td></tr><tr><td style="text-align:left;">show()</td><td style="text-align:left;">显示元素，传入参数毫秒值，可以执行动画</td></tr><tr><td style="text-align:left;">hide()</td><td style="text-align:left;">显示元素，传入参数毫秒值，可以执行动画</td></tr><tr><td style="text-align:left;">siblings()</td><td style="text-align:left;">获取所有的兄弟元素，可以传入参数进行过滤，同<code> children()</code>规则</td></tr><tr><td style="text-align:left;">find()</td><td style="text-align:left;">在当前元素中找子元素，在不可使用选择器时，可以当后代选择器的功能来使用，不同于<code>children()</code>,<code>children()</code>只能获取直接子元素</td></tr><tr><td style="text-align:left;">each(function(k,v){ .. })</td><td style="text-align:left;"> </td></tr><tr><td style="text-align:left;">foreach(function(v,k){ .. })</td><td style="text-align:left;"> </td></tr></tbody></table><h2 id="操作类样式" tabindex="-1"><a class="header-anchor" href="#操作类样式" aria-hidden="true">#</a> 操作类样式</h2><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">addClass()</td><td style="text-align:left;">添加类样式</td><td style="text-align:left;">传入类名可以添加类样式，不需要在前面加点，如果需要添加多个类样式，用空格隔开</td></tr><tr><td style="text-align:left;">removeClass()</td><td style="text-align:left;">移除类样式</td><td style="text-align:left;">传入一个参数表示移除指定的类样式 不传参数表示移除所有的类样式</td></tr><tr><td style="text-align:left;">hasClass()</td><td style="text-align:left;">判断是否应用了类样式</td><td style="text-align:left;">传入一个参数判断是否应用了该类样式，返回值是 <code>boolean</code> 类型</td></tr><tr><td style="text-align:left;">toggleClass()</td><td style="text-align:left;">切换类样式</td><td style="text-align:left;">传入一类样式，如果有就移除，如果没有就添加</td></tr></tbody></table><h2 id="链式编程" tabindex="-1"><a class="header-anchor" href="#链式编程" aria-hidden="true">#</a> 链式编程</h2><p>对象调用方法后，返回值仍然是对象自身，可以继续调用该对象的其他方法</p><h3 id="修复断链" tabindex="-1"><a class="header-anchor" href="#修复断链" aria-hidden="true">#</a> 修复断链</h3><p><code>end();</code> 回到断链之前的对象</p><h2 id="元素操作" tabindex="-1"><a class="header-anchor" href="#元素操作" aria-hidden="true">#</a> 元素操作</h2><h3 id="获取兄弟元素" tabindex="-1"><a class="header-anchor" href="#获取兄弟元素" aria-hidden="true">#</a> 获取兄弟元素</h3><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">next()</td><td style="text-align:left;">获取下一个兄弟元素</td></tr><tr><td style="text-align:left;">prev()</td><td style="text-align:left;">获取上一个兄弟元素</td></tr><tr><td style="text-align:left;">nextAll()</td><td style="text-align:left;">获取后面所有的兄弟元素</td></tr><tr><td style="text-align:left;">prevAll()</td><td style="text-align:left;">获取前面所有的兄弟元素</td></tr><tr><td style="text-align:left;">siblings()</td><td style="text-align:left;">获取其他所有的兄弟元素</td></tr></tbody></table><h3 id="获取父子元素" tabindex="-1"><a class="header-anchor" href="#获取父子元素" aria-hidden="true">#</a> 获取父子元素</h3><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">children()</td><td style="text-align:left;">获取所有的直接子元素</td></tr><tr><td style="text-align:left;">find()</td><td style="text-align:left;">获取指定的子元素（直接或者间接的都可以获取）</td></tr><tr><td style="text-align:left;">parent()</td><td style="text-align:left;">获取父元素</td></tr><tr><td style="text-align:left;">first()</td><td style="text-align:left;">获取第一个元素</td></tr><tr><td style="text-align:left;">last()</td><td style="text-align:left;">获取最后一个子元素</td></tr></tbody></table><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;标签代码&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;p&gt;111&lt;/p&gt;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">jQuery对象</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;标签代码&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加" tabindex="-1"><a class="header-anchor" href="#添加" aria-hidden="true">#</a> 添加：</h3><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">append()</td><td style="text-align:left;">在当前元素中的末尾追加</td></tr><tr><td style="text-align:left;">prepend()</td><td style="text-align:left;">在当前元素中的前面插入</td></tr><tr><td style="text-align:left;">after()</td><td style="text-align:left;">在当前元素后面作为兄弟元素添加</td></tr><tr><td style="text-align:left;">appendTo()</td><td style="text-align:left;">将调用者加到<code>参数 1</code> 元素中</td></tr></tbody></table><h3 id="移除内容和克隆元素" tabindex="-1"><a class="header-anchor" href="#移除内容和克隆元素" aria-hidden="true">#</a> 移除内容和克隆元素</h3><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">clone()</td><td style="text-align:left;">克隆元素</td></tr><tr><td style="text-align:left;">remover()</td><td style="text-align:left;">移除自身</td></tr><tr><td style="text-align:left;">empty()</td><td style="text-align:left;">清空元素内部的内容</td></tr><tr><td style="text-align:left;">html(&quot;&quot;)</td><td style="text-align:left;">清空元素内部的内容</td></tr></tbody></table><h3 id="操作元素属性" tabindex="-1"><a class="header-anchor" href="#操作元素属性" aria-hidden="true">#</a> 操作元素属性</h3><p><code>attr();</code> 设置属性，参数 1 是属性名，参数 2 是属性值，如果只传入一个参数，则表示根据属性明获取属性值</p><h2 id="动画" tabindex="-1"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h2><h3 id="显示隐藏" tabindex="-1"><a class="header-anchor" href="#显示隐藏" aria-hidden="true">#</a> 显示隐藏</h3><p><code>show();</code> <code>hide();</code></p><ul><li>参数 1：动画执行的速度，可以传入<code>number</code>或<code>string</code>，传入<code>number</code>表示动画执行时长，单位是毫秒，<code>string</code>的取值是<code>slow</code> <code>normal</code> <code>fast</code></li><li>参数 2：回调函数，当动画执行完毕后执行的函数</li></ul><h3 id="划入滑出" tabindex="-1"><a class="header-anchor" href="#划入滑出" aria-hidden="true">#</a> 划入滑出</h3><p><code>slideUp();</code> <code>slideDown();</code> <code>slideToggle();</code></p><ul><li>参数 1：动画执行的速度，可以传入<code>number</code>或<code>string</code>，传入<code>number</code>表示动画执行时长，单位是毫秒，<code>string</code>的取值是<code>slow</code> <code>normal</code> <code>fast</code></li><li>参数 2：回调函数，当动画执行完毕后执行的函数</li></ul><h3 id="淡入淡出" tabindex="-1"><a class="header-anchor" href="#淡入淡出" aria-hidden="true">#</a> 淡入淡出</h3><p><code>fadeIn();</code> <code>fadeOut();</code> <code>fadeToggle();</code></p><ul><li>参数 1：动画执行的速度，可以传入<code>number</code>或<code>string</code>，传入<code>number</code>表示动画执行时长，单位是毫秒，<code>string</code>的取值是<code>slow</code> <code>normal</code> <code>fast</code></li><li>参数 2：回调函数，当动画执行完毕后执行的函数 <code>fadeTo();</code>将透明度以动画的形式改变到指定的值</li><li>参数 1：动画执行的速度</li><li>参数 2：指定的透明度</li><li>参数 3：回调函数</li></ul><h3 id="animate-方法" tabindex="-1"><a class="header-anchor" href="#animate-方法" aria-hidden="true">#</a> animate 方法</h3><p>指定自定义动画</p><ul><li>参数 1：指定<code>width</code> <code>height</code> <code>top</code> <code>left</code> <code>opacity等属性的目标值</code></li><li>参数 2：动画执行的时长</li><li>参数 3：回调函数</li></ul><h3 id="stop-方法" tabindex="-1"><a class="header-anchor" href="#stop-方法" aria-hidden="true">#</a> stop 方法</h3><p><code>stop(); </code>停止动画；因为<code>jQuery</code>中动画都是排队执行的，所以有些情况需要停止动画后执行动画</p><h2 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法" aria-hidden="true">#</a> 其他方法</h2><p>表单元素的一些状态属性，例如<code>checked </code> <code>selected</code> <code>disabled</code>等，这些属性无法使用<code>attr()</code>方法来获取和设置，需要使用<code>prop()</code>：</p><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">prop();</td><td style="text-align:left;">传一个参数表示获取 传两个参数表示设置，参数 1 属性名，参数 2 属性值</td></tr><tr><td style="text-align:left;">width();</td><td style="text-align:left;">宽，不传参数表示获取，传入参数表示设置，可带单位的字符串或数字</td></tr><tr><td style="text-align:left;">height();</td><td style="text-align:left;">高</td></tr><tr><td style="text-align:left;">offset();</td><td style="text-align:left;">不传参数表示获取，返回值是一个对象，该对象有<code>top</code>和<code>left</code>属性，分别表示<code>offsetTop</code>和<code>offsetLeft</code></td></tr><tr><td style="text-align:left;">传入参数表示设置，可以传入一个具有<code>left</code>和<code>top</code>属性的对象</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">scrollTop();</td><td style="text-align:left;">不传参数表示获取，元素滚动出去的宽高</td></tr><tr><td style="text-align:left;">scrollLeft();</td><td style="text-align:left;"> </td></tr></tbody></table><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><h3 id="绑定事件" tabindex="-1"><a class="header-anchor" href="#绑定事件" aria-hidden="true">#</a> 绑定事件</h3><h4 id="click" tabindex="-1"><a class="header-anchor" href="#click" aria-hidden="true">#</a> click</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#btn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#btn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数 1：事件类型</li><li>参数 2：事件处理函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#btn&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click mouseover mouseout&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){}); </span><span style="color:#7F848E;font-style:italic;">// 为三种事件绑定同一个事件处理函数</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#btn&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">({</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">:</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){},</span><span style="color:#61AFEF;">mouseover</span><span style="color:#ABB2BF;">:</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){}); </span><span style="color:#7F848E;font-style:italic;">// 同时为元素绑定多个事件，对应多个事件处理函数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="事件委派delegate" tabindex="-1"><a class="header-anchor" href="#事件委派delegate" aria-hidden="true">#</a> 事件委派<code>delegate();</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">delegate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;p&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数 1:：子元素</li><li>参数 2：事件类型</li><li>参数 3：事件处理函数</li></ul><h4 id="on-推荐" tabindex="-1"><a class="header-anchor" href="#on-推荐" aria-hidden="true">#</a> on <code>推荐</code>：</h4><p>既可以给自己绑定事件，也可以做事件委派，</p><ul><li>给自己绑定事件<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#btn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数 1：事件类型</li><li>参数 2：事件处理函数</li></ul></li><li>给子元素绑定事件<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#dv&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;p&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数 1：事件类型</li><li>参数 2：要绑定事件的子元素</li><li>参数 3：事件处理函数</li></ul></li></ul><h3 id="解绑事件" tabindex="-1"><a class="header-anchor" href="#解绑事件" aria-hidden="true">#</a> 解绑事件</h3><p>成对出现，用什么方法绑定的事件，就用对应的方法解绑</p><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">on()</td><td style="text-align:left;">off();</td></tr><tr><td style="text-align:left;">bind()</td><td style="text-align:left;">unbind()</td></tr><tr><td style="text-align:left;">delegate()</td><td style="text-align:left;">undelegate();</td></tr></tbody></table><blockquote><p>如果是通过事件委派的方式给子元素绑定的事件，当解绑父元素的事件时，子元素的事件也会被解绑<br><code>off();</code>不传参数表示移除父子元素的所有事件<br><code>off(&quot;**&quot;);</code> 解绑子元素的事件</p></blockquote><h3 id="触发事件" tabindex="-1"><a class="header-anchor" href="#触发事件" aria-hidden="true">#</a> 触发事件</h3><ul><li>直接调用 <code>jQuery</code> 对象的事件方法</li><li>使用 <code>trigger()</code>方法</li><li>使用 <code>triggerHandler()</code>方法 <blockquote><p>第一种和第二种完全一样 第三种不会触发浏览器的默认事件，例如文本框获取焦点后会光标闪烁并显示轮廓</p></blockquote></li></ul><h3 id="取消冒泡和取消浏览器的默认行为" tabindex="-1"><a class="header-anchor" href="#取消冒泡和取消浏览器的默认行为" aria-hidden="true">#</a> 取消冒泡和取消浏览器的默认行为</h3><p>在事件处理函数末尾<code>return false</code>即可</p>`,101),o=[n];function d(r,i){return e(),a("div",null,o)}const y=s(t,[["render",d],["__file","jquery.html.vue"]]);export{y as default};
