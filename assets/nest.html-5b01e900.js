import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as l}from"./app-fd217ae5.js";const e={},p=l(`<p><code>Nest (NestJS)</code> 是一个用于构建高效、可扩展的 <code>Node.js</code> 服务器端应用程序的开发框架</p><ul><li>原生支持 <code>TypeScript</code> 的框架</li><li>可以基于 <code>Express</code> 也可以选择 <code>fastify</code></li></ul><h2 id="项目创建" tabindex="-1"><a class="header-anchor" href="#项目创建" aria-hidden="true">#</a> 项目创建</h2><h3 id="安装全局包" tabindex="-1"><a class="header-anchor" href="#安装全局包" aria-hidden="true">#</a> 安装全局包</h3><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">npm i </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">g </span><span style="color:#E06C75;">@nestjs</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">cli</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h3><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">nest new project</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">name</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">src</span></span>
<span class="line"><span style="color:#abb2bf;">├── app.controller.spec.ts  // 针对控制器的单元测试</span></span>
<span class="line"><span style="color:#abb2bf;">├── app.controller.ts       // 单个路由的基本控制器(Controller)</span></span>
<span class="line"><span style="color:#abb2bf;">├── app.module.ts           // 应用程序的根模块(Module)</span></span>
<span class="line"><span style="color:#abb2bf;">├── app.service.ts          // 具有单一方法的基本服务(Service)</span></span>
<span class="line"><span style="color:#abb2bf;">├── main.ts                 // 应用程序的入口文件，它使用核心函数 NestFactory 来创建 Nest 应用程序的实例。</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="入口文件" tabindex="-1"><a class="header-anchor" href="#入口文件" aria-hidden="true">#</a> 入口文件</h4><p>内容比较简单， 使用<code>Nest.js</code>的工厂函数<code>NestFactory</code>来创建了一个<code>AppModule</code>实例，启动了 <code>HTTP</code> 侦听器，以侦听<code>main.ts</code> 中所定义的端口。</p><h4 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h4><p>根模块提供了用来启动应用的引导机制，可以包含很多功能模块。 <code>.mudule</code>文件需要使用一个<code>@Module()</code>装饰器的类，装饰器可以理解成一个封装好的函数，其实是一个语法糖。<code>@Module()</code> 装饰器接收四个属性：</p><ul><li>providers：<code>Nest.js</code>注入器实例化的提供者（服务提供者），处理具体的业务逻辑，各个模块之间可以共享（注入器的概念后面依赖注入部分会讲解）；</li><li>controllers：处理<code>http</code>请求，包括路由控制，向客户端返回响应，将具体业务逻辑委托给<code>providers</code>处理；</li><li>imports：导入模块的列表，如果需要使用其他模块的服务，需要通过这里导入；</li><li>exports：导出服务的列表，供其他模块导入使用。如果希望当前模块下的服务可以被其他模块共享，需要在这里配置导出；</li></ul><h4 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> Controller</h4><p>使用<code>@Controller</code>装饰器来定义控制器, <code>@Get</code>是请求方法的装饰器，对<code>getHello</code>方法进行修饰， 表示这个方法会被<code>GET</code>请求调用。</p><h4 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h4><p>使用<code>@Injectable</code>修饰后的 <code>AppService</code>, 在<code>AppModule</code>中注册之后，在<code>app.controller.ts</code>中使用，我们就不需要使用<code>new AppService()</code>去实例化，直接引入过来就可以用</p><h2 id="路由装饰器" tabindex="-1"><a class="header-anchor" href="#路由装饰器" aria-hidden="true">#</a> 路由装饰器</h2><h3 id="controller-1" tabindex="-1"><a class="header-anchor" href="#controller-1" aria-hidden="true">#</a> @Controller</h3><p>如每一个要成为控制器的类，都需要借助<code>@Controller</code>装饰器的装饰，该装饰器可以传入一个路径参数，作为访问这个控制器的主路径</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 主路径为 app</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">appService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  ....</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 需访问 localhost:3000/app</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-方法处理装饰器" tabindex="-1"><a class="header-anchor" href="#http-方法处理装饰器" aria-hidden="true">#</a> HTTP 方法处理装饰器</h3><p><code>@Get</code>、<code>@Post</code>、<code>@Put</code>等众多用于<code>HTTP</code>方法处理装饰器，经过它们装饰的方法，可以对相应的<code>HTTP</code>请求进行响应。同时它们可以接受一个字符串或一个字符串数组作为参数，这里的字符串可以是固定的路径，也可以是通配符。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 主路径为 app</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;system&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">appService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 1. 固定路径：</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 可以匹配到 get请求，http://localhost:3000/system/list</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getList</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 可以匹配到 post请求，http://localhost:3000/system/list</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">createList</span><span style="color:#ABB2BF;">():</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">{...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 2.通配符路径(?+* 三种通配符 )</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 可以匹配到 get请求, http://localhost:3000/system/user_xxx</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user_*&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getUser</span><span style="color:#ABB2BF;">(){</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;getUser&quot;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 3.带参数路径</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 可以匹配到put请求，http://localhost:3000/system/list/xxxx</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list/:id&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">updateList</span><span style="color:#ABB2BF;">(){ </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;update&quot;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>修改文件实时监听可使用已配置好的指令<code>npm run start:dev</code></p></blockquote><h3 id="全局路由前缀" tabindex="-1"><a class="header-anchor" href="#全局路由前缀" aria-hidden="true">#</a> 全局路由前缀</h3><p>除了上面这些装饰器可以设置路由外， 我们还可以设置全局路由前缀， 比如给所以路由都加上/api 前缀。此时需要修改<code>main.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setGlobalPrefix</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;api&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 设置全局路由前缀</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">9080</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 访问需 localhost:3000/api/xxx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写代码" tabindex="-1"><a class="header-anchor" href="#编写代码" aria-hidden="true">#</a> 编写代码</h2><h3 id="nest-命令" tabindex="-1"><a class="header-anchor" href="#nest-命令" aria-hidden="true">#</a> nest 命令</h3><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># nest g [文件类型] [文件名] [文件目录]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建模块</span></span>
<span class="line"><span style="color:#ABB2BF;">nset g mo system</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建控制器</span></span>
<span class="line"><span style="color:#ABB2BF;">nest g co system</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意创建顺序应为先创建<code>Module</code>后，再创建<code>Controller</code>和<code>Service</code>，这样创建出来的文件在<code>Module</code>中会自动注册</p></blockquote><h2 id="配置接口文档" tabindex="-1"><a class="header-anchor" href="#配置接口文档" aria-hidden="true">#</a> 配置接口文档</h2><p>① 安装</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">npm install </span><span style="color:#E06C75;">@nestjs</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">swagger swagger</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">ui</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">express </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">S</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 在<code>main.js</code>中设置</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">SwaggerModule</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">DocumentBuilder</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">NestExpressApplication</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enableCors</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  ....</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 设置swagger文档</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">DocumentBuilder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setTitle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;管理后台&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setDescription</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;管理后台接口文档&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setVersion</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1.0&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">addBearerAuth</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">SwaggerModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createDocument</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">SwaggerModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;docs&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">9080</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置完毕可以在<code>localhost:3000/docs</code>里查看生成的文档</p><h3 id="接口标签" tabindex="-1"><a class="header-anchor" href="#接口标签" aria-hidden="true">#</a> 接口标签</h3><p>我们可以根据<code>Controller</code>来分类， 只要添加<code>@ApiTags</code>就可以</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiTags</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Body</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Delete</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Param</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Post</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Put</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Query</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiTags</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;文章&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;post&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">PostsController</span><span style="color:#ABB2BF;"> {...}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口说明" tabindex="-1"><a class="header-anchor" href="#接口说明" aria-hidden="true">#</a> 接口说明</h3><p>进一步优化文档， 给每一个接口添加说明文字， 让使用的人直观的看到每个接口的含义，不要让使用的人去猜。同样在<code>Controller</code>中， 在每一个路由的前面使用<code>@ApiOperation</code>装饰器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiTags</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">ApiOperation</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">PostsController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;创建文章&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">post</span><span style="color:#ABB2BF;">) {....}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;获取文章列表&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">findAll</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Query</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">query</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">PostsRo</span><span style="color:#ABB2BF;">&gt; {...}</span></span>
<span class="line"><span style="color:#ABB2BF;">  ....</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口传参" tabindex="-1"><a class="header-anchor" href="#接口传参" aria-hidden="true">#</a> 接口传参</h3><p><code>Swagger</code>的优势之一就是，只要注解到位，可以精确展示每个字段的意义，我们想要对每个传入的参数进行说明 ① 在<code>xxx</code>目录下创建<code>xxx.dto.ts</code>文件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CreatePostDto</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">author</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">cover_url</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 在<code>xxx.controller</code>中使用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CreatePostDto</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./dto/create-post.dto&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;创建文章&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">post</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">CreatePostDto</span><span style="color:#ABB2BF;">) {...}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据验证" tabindex="-1"><a class="header-anchor" href="#数据验证" aria-hidden="true">#</a> 数据验证</h2><p><code>Nest.js</code>自带了三个开箱即用的管道：<code>ValidationPipe</code>、<code>ParseIntPipe</code>和<code>ParseUUIDPipe</code>, 其中<code>ValidationPipe</code> 配合<code>class-validator</code>就可以完美的实现我们想要的效果（对参数类型进行验证，验证失败抛出异常）。 管道验证操作通常用在 dto 这种传输层的文件中,用作验证操作 ① 安装</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">npm install class</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">validator class</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">transformer </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">S</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>② 在<code>xxx.dto.ts</code>中添加验证，完善错误信息</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">IsNotEmpty</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">IsNumber</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">IsString</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;class-validator&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">CreatePostDto</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiProperty</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;文章标题&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">IsNotEmpty</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;文章标题必填&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">IsNotEmpty</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;缺少作者信息&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiProperty</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;作者&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">author</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiPropertyOptional</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;内容&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiPropertyOptional</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;文章封面&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">cover_url</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">IsNumber</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiProperty</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;文章类型&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 最后在<code>main.ts</code>中全局注册管道<code>ValidationPipe</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalPipes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ValidationPipe</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,57),o=[p];function c(r,t){return n(),a("div",null,o)}const d=s(e,[["render",c],["__file","nest.html.vue"]]);export{d as default};
