import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,a as n}from"./app-fd217ae5.js";const l={},o=n(`<h2 id="静态网站与动态网站" tabindex="-1"><a class="header-anchor" href="#静态网站与动态网站" aria-hidden="true">#</a> 静态网站与动态网站</h2><ul><li>静态网站：使用浏览器端语言进行编程，网站由静态代码（<code>HTML</code>,<code>CSS</code>,<code>JS</code>）组成。用户请求服务上已经存在的页面，不需要进行业务逻辑的处理（如查询商品信息、文章信息等）</li><li>动态网站：网页通过程序动态生成的。用户可以和服务器进行交互（可以根据用户输入的不同信息返回不同的运行结果），可以处理复杂的业务逻辑</li></ul><h2 id="php-语言" tabindex="-1"><a class="header-anchor" href="#php-语言" aria-hidden="true">#</a> PHP 语言</h2><p>运行于<code>web</code>服务器端的<code>WEB</code>开发语言。用户可以通过浏览器发起对指定脚本的请求，服务器执行对应的脚本并返回执行结果</p><h2 id="web-服务器" tabindex="-1"><a class="header-anchor" href="#web-服务器" aria-hidden="true">#</a> web 服务器</h2><p><code>PHP</code>是用于网页服务器端编程的脚本语言。<code>WEB</code>服务器是安装了<code>WEB</code>服务器软件的计算机，存储网站脚本程序</p><h2 id="软件架构" tabindex="-1"><a class="header-anchor" href="#软件架构" aria-hidden="true">#</a> 软件架构</h2><p><code>C/S</code>架构<code>Client/Server</code>的简写。访问不同的服务器，需要各自安装不同的客户端软件。<br><code>B/S</code>架构<code>browser</code>,把所有的客户端都统一成浏览器，提供一个入口即可。用户输入请求的服务器以及脚本地址，获取对应的页面信息返回</p><h2 id="ip-地址" tabindex="-1"><a class="header-anchor" href="#ip-地址" aria-hidden="true">#</a> IP 地址</h2><p><code>IP</code>地址相当于每一个连入互联网的设备的身份证号。在浏览器地址栏按照主机的<code>IP</code>地址信息进行访问，可以找到互联网上的这台主机。<br><code>IP</code>地址分为四段，每段数字的取值范围是<code>0-255</code>，占据<code>1</code>个字节（<code>8位</code>），总共<code>4</code>个字节<br><code>127.0.0.1</code>作为本地测试的 IP 地址<br><code>192.168</code>开头为局域网地址</p><h2 id="域名-domain-name" tabindex="-1"><a class="header-anchor" href="#域名-domain-name" aria-hidden="true">#</a> 域名 Domain Name</h2><p>服务器的<code>IP</code>地址不便记忆。使用指定的字符串对应特定<code>IP</code>地址，可以简化使用。<br><code>localhost</code>本地主机。这是一个保留域名，主要用于本地测试，对应<code>127.0.0.1</code></p><h2 id="dns-域名解析系统" tabindex="-1"><a class="header-anchor" href="#dns-域名解析系统" aria-hidden="true">#</a> DNS 域名解析系统</h2><p><code>Domain Name System</code>，保存了服务器名与<code>IP</code>地址之间的映射关系</p><h2 id="dns-服务器" tabindex="-1"><a class="header-anchor" href="#dns-服务器" aria-hidden="true">#</a> DNS 服务器</h2><p>服务器的真正身份信息为<code>IP</code>地址，需要专门的服务器来解析<code>IP</code>地址与域名的映射关系<br><code>DNS</code>为一个分布式的数据库，存储 IP 地址与域名的映射关系<br> 当从浏览器输入域名地址，发起请求时，浏览器访问<code>DNS</code>服务器，获取域名对应的<code>IP</code>地址，然后使用该<code>IP</code>地址访问服务器</p><h2 id="本地hosts文件" tabindex="-1"><a class="header-anchor" href="#本地hosts文件" aria-hidden="true">#</a> 本地<code>hosts</code>文件</h2><p>每次都请求网络中的<code>DNS</code>服务器，时间成本较高。<code>windows</code>自带的<code>DNS</code>文件，可以用来缓存域名与<code>IP</code>地址的对应关系，此外浏览器也会缓存部分域名与<code>IP</code>地址的映射 <code>C:\\Windows\\System32\\drivers\\stc\\hosts</code> | <code> win+R drivers</code></p><h2 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h2><p>一台计算机可能同时提供多种服务，如<code>web</code>服务，FTP 服务（传输网站程序），不同服务器软件见识不同的端口来提供不同的服务。 <code>web</code>服务 :<code>80</code></p><h2 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> URL</h2><p><code>http/https</code>网络协议，<code>www.baidu.com</code>服务器名，:<code>80</code>端口号，<code>index.php</code>资源名</p><h2 id="字符集-utf8" tabindex="-1"><a class="header-anchor" href="#字符集-utf8" aria-hidden="true">#</a> 字符集 utf8</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">header</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;content-type:text/html;charset=utf8&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>写在最顶部</p><h2 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量" aria-hidden="true">#</a> 定义变量</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$name</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>变量声明一般与赋值同时进行</p><h2 id="删除变量" tabindex="-1"><a class="header-anchor" href="#删除变量" aria-hidden="true">#</a> 删除变量</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">unset</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除变量名及值之间的对应关系，变量名及变量值不会立即消失，<code>PHP</code>有垃圾回收机制会处理。</p><h2 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> 输出</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$str1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">$str2</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出字符串、变量及表达式。可以同时输出多个变量及字符串</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$str</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以输出字符串、变量及表达式。不支持同时输出多个字符串及变量</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">var_dump</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$str1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">$str2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出一个或者多个变量的类型，长度及值。一般用于打印复杂变量（结合 pre 标记）</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&lt;pre&gt;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">var_dump</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$array1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&lt;/pre&gt;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="print-r" tabindex="-1"><a class="header-anchor" href="#print-r" aria-hidden="true">#</a> print_r()</h2><p>输出变量的值，一般用于打印变量。对于字符串类型、整形、浮点型打印变量本身。不能打印布尔类型的原始值。对于复杂类型的变量如数组、对象按照一定的格式显示</p><h2 id="php-数据类型" tabindex="-1"><a class="header-anchor" href="#php-数据类型" aria-hidden="true">#</a> php 数据类型</h2><ul><li>标量数据类型(scalar)</li><li>整型 integar</li><li>浮点型 float</li><li>字符串 string</li><li>布尔类型 boolean</li></ul><h3 id="复杂数据类型" tabindex="-1"><a class="header-anchor" href="#复杂数据类型" aria-hidden="true">#</a> 复杂数据类型</h3><ul><li>数组 array</li><li>对象 object</li></ul><h3 id="特殊数据类型" tabindex="-1"><a class="header-anchor" href="#特殊数据类型" aria-hidden="true">#</a> 特殊数据类型</h3><ul><li>null</li><li>资源型 resource</li></ul><h3 id="整型最大值" tabindex="-1"><a class="header-anchor" href="#整型最大值" aria-hidden="true">#</a> 整型最大值</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#D19A66;">PHP_INT_MAX</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="isset" tabindex="-1"><a class="header-anchor" href="#isset" aria-hidden="true">#</a> isset()</h3><p>判断变量是否设置，变量未设置或者设置为<code>null</code>返回<code>false</code>，其余情况全为<code>true</code></p><h3 id="empty" tabindex="-1"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> empty()</h3><p>判断变量是否为空，PHP 中认为变量的值为<code>&quot;&quot;</code>、<code>0</code>、<code>&quot;0&quot;</code>、<code>null</code>、<code>false</code>、<code>[]</code>时，变量虽然定义了，但是无实际的意义，为空。</p><h3 id="类型强制转换" tabindex="-1"><a class="header-anchor" href="#类型强制转换" aria-hidden="true">#</a> 类型强制转换</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">int</span><span style="color:#56B6C2;">|</span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;">|</span><span style="color:#E5C07B;">bool</span><span style="color:#56B6C2;">|</span><span style="color:#E5C07B;">float</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">$var</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h2><p>脚本执行周期内，值不会发生改变的量。<br> 常量存放在常量区，该区域中的常量不可以修改及删除。<br> 相同的值定义为常量可以节省存储空间，如运行模式常量，版本常量，路径常量等</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">define</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;VERSION&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;1.1.1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常量名推荐全部字母大写</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> 常量名 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> 常量值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与 define 定义的常量一样。不能在函数、流程控制(<code>if</code>、<code>while</code>)中定义常量</p><h3 id="判断是否已经定义摸个变量" tabindex="-1"><a class="header-anchor" href="#判断是否已经定义摸个变量" aria-hidden="true">#</a> 判断是否已经定义摸个变量</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">defined</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;AAA&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="特殊运算符" tabindex="-1"><a class="header-anchor" href="#特殊运算符" aria-hidden="true">#</a> 特殊运算符</h2><p>字符串连接符<code>.</code><br> 遇到比较长的字符串，可以先拼接再输出。<code>PHP</code>有专门的输出缓冲层，只有缓冲区域的数据达到指定大小才会输出。尽量使用字符串连接符提升代码的执行效率</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;name &quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$name</span><span style="color:#ABB2BF;">.</span><span style="color:#98C379;">&quot;age &quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="字符串分隔符" tabindex="-1"><a class="header-anchor" href="#字符串分隔符" aria-hidden="true">#</a> 字符串分隔符<code>,</code></h2><p><code>echo</code>语句可以同时输出多个表达式，多个表达式之间使用,分割。此时将各个表达式作为参数，将<code>echo</code>当做函数使用</p><h2 id="错误抑制符" tabindex="-1"><a class="header-anchor" href="#错误抑制符" aria-hidden="true">#</a> 错误抑制符<code>@</code></h2><p>抑制错误提示，可以加在变量前面</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$res</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">@</span><span style="color:#56B6C2;">mysql_connect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$host</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">$user</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">$password</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="die-exit" tabindex="-1"><a class="header-anchor" href="#die-exit" aria-hidden="true">#</a> die() exit()</h2><p>退出代码执行，当前位置之后的所有代码不执行。可以用来进行程序运行控制，可以在出错的时候执行此语句，退出代码的执行。<br> 可以在退出时输出变量值、完成函数执行 <code>die([..]);</code></p><h2 id="sleep" tabindex="-1"><a class="header-anchor" href="#sleep" aria-hidden="true">#</a> sleep()</h2><p>执行到<code>sleep</code>所在的语句后，延缓一定的秒数后继续执行。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">函数名</span><span style="color:#ABB2BF;">([参数1,参数2]){</span></span>
<span class="line"><span style="color:#ABB2BF;">  函数体</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数名不区分大小写</p><h3 id="调用" tabindex="-1"><a class="header-anchor" href="#调用" aria-hidden="true">#</a> 调用</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">函数名</span><span style="color:#ABB2BF;">([参数1,参数2]);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先声明后调用。PHP 执行的第一阶段为预编译，将函数代码存放在内存的代码区，执行阶段使用函数名调用函数。</p><h3 id="php-支持的作用域" tabindex="-1"><a class="header-anchor" href="#php-支持的作用域" aria-hidden="true">#</a> PHP 支持的作用域</h3><p>全局作用域与局部作用域没有交集，不同函数的作用域也没有交集。<br> 创建一个全局变量，系统会自动在<code>$GLOBALS</code>中创建变量名为下标的元素<br> 在局部作用域使用<code>$GLOBALS[&quot;A&quot;]</code>引用全局数据。</p><h3 id="时间日期函数" tabindex="-1"><a class="header-anchor" href="#时间日期函数" aria-hidden="true">#</a> 时间日期函数</h3><p><code>time();</code>返回 1970 年 1 月 1 日到当前的事件秒数 <code>date();</code>按照给定的格式产生字符串</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;当前时间为&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">date</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Y-m-d H:i:s&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;">time</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">$file</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">date</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Ymd-His&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">mt_rand</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">9999</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">.</span><span style="color:#98C379;">&#39;.png&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$file</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>strtotime();将字符串转换为时间戳</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">strtotime</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;now&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">strtotime</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;10 September +1 day&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">strtotime</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;+1 day&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">strtotime</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;+1 week&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">strtotime</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;+1 week 2 days 4 hours 2 seconds&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">strtotime</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;next Thursday&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">strtotime</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;last Monday&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数学函数" tabindex="-1"><a class="header-anchor" href="#数学函数" aria-hidden="true">#</a> 数学函数</h3><p><code>max(),min()</code> 分别返回一组数的最大值及最小值 <code>abs();</code> 返回绝对值 <code>floor();</code> 向下取整 <code>ceil();</code> 向上取整 <code>round();</code> 四舍五入 <code>rand()</code>和<code>mt_rand()</code> 返回随机数，可以取到两端的值。<code>mt_rand</code>生成速度比<code>rand</code>快四倍多 <code>dechex(); </code>十进制转十六进制</p><h2 id="文件载入" tabindex="-1"><a class="header-anchor" href="#文件载入" aria-hidden="true">#</a> 文件载入</h2><p>将文件代码引入到<code>PHP</code>文件中执行，如果引入的是<code>HTML</code>代码，会再<code>PHP</code>模式与<code>HTML</code>模式之间切换。</p><h2 id="魔术常量-dir" tabindex="-1"><a class="header-anchor" href="#魔术常量-dir" aria-hidden="true">#</a> 魔术常量<code>__DIR__</code></h2><p>自动获取当前执行脚本的目录</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./include1.html&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">require_once</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;../include2.html&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;当前执行脚本的目录&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">__DIR__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>include</code> | <code>inclide_once</code> | <code>require</code> | <code>require_once</code><br> 均可以引入文件，require 引入文件失败返回<code>fatal error</code>，后续代码不执行 <code>_once</code> 对于已经载入文件的，不再进行载入，避免函数的重复定义</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>单引号不解析变量<br> 双引号可以解析变量<br><code>heredoc</code>字符串定义结构</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$str</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&lt;&lt;&lt;</span><span style="color:#C678DD;">heredoc标记名</span></span>
<span class="line"><span style="color:#98C379;">   //字符串内容</span></span>
<span class="line"><span style="color:#C678DD;">heredoc标记名</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以解析变量，单双引号不需要转义处理。一般用于保存较长字符串或者 JS 代码等</p><h3 id="字符串长度" tabindex="-1"><a class="header-anchor" href="#字符串长度" aria-hidden="true">#</a> 字符串长度</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回单字节字符串的字节数</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">mb_strlen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$str</span><span style="color:#ABB2BF;">,utf8);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开启<code>php_mbsting.dll</code>扩展后使用<code>mb_strlen</code>函数来统计多字节字符串的字符长度。</p><h2 id="字符串相关函数" tabindex="-1"><a class="header-anchor" href="#字符串相关函数" aria-hidden="true">#</a> 字符串相关函数</h2><p><code>printf(&quot;%s的年龄为%d&quot;,$name,$age);</code>依据第一个参数的格式产生输出 <code>str_replace($search,$replace,$subject);</code>将<code>$subject</code>中的全部<code>search</code>都被<code>replace</code>替换 <code>str_ireplace();</code>不区分大小写 <code>str_repeat(sting$input,int$multiplier);</code>返回<code>input</code>重复<code>multiplier</code>次后的结果</p><p><code>strtolower();</code>转换为小写<br><code>strtoupper();</code>转换为大写<br><code>ucfirst();</code>转换为首字母大写</p><p><code>trim($str)</code>去除首尾空白<br><code>ltrim();</code>去除左侧空白<br><code>rtrim();</code>去除右侧空白</p><p><code>explode(&#39;分隔符&#39;,$str);</code><br> 将目标字符串使用分隔符分割，返回子字符串组成的数组<br><code>implode(&#39;连接的字符&#39;,$arr);</code><br> 将数组的元素使用连接字符拼接成新的字符串<br><code>str_split($str,int字符串的长度);</code><br> 将字符串分成指定长度(默认为 1 字节)的子字符串，返回数组</p><p><code>strpos($str,&#39;要查找的子字符串&#39;);</code><br> 查找子字符串在目标字符串中的首次出现的位置，从左侧开始查找，下标从 0 开始<br><code>strpos();</code> 从右侧开始查找<br><code>substr($str,起始下标,截取的长度);</code><br> 截取指定位置开始的子字符串，省略第三个参数直接截取到末尾<br><code>strchr(目标字符串，截取的起始字符串);</code><br> 从左侧，从字符串出现的位置截取到末尾<br><code>strrchr()</code><br> 从右侧</p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>数组是内存中一块连续的空间(堆区)，用来保存不同类型的数据，数据没有长度限制<br> 数组由多个元素组成，每个元素有下标，称为键(<code>key</code>)，元素有值(<code>value</code>)。数组有多个键值对组成</p><h3 id="显式创建数组" tabindex="-1"><a class="header-anchor" href="#显式创建数组" aria-hidden="true">#</a> 显式创建数组</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">$arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>隐式创建数组</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$arr</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">$arr</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// $arr=[1,2];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>索引数组</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$arr</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">=&gt;</span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">345</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">456</span><span style="color:#ABB2BF;">];下标仅为一个索引</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关联数组</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$student</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">=&gt;</span><span style="color:#98C379;">&#39;jean&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">=&gt;</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&#39;is_single&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>混合数组</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$info</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">=&gt;</span><span style="color:#98C379;">&#39;jam&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多维数组</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$stu</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;aaa&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;bbb&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">28</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;ccc&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组元素的访问</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组遍历</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">foreach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">as</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">$key</span><span style="color:#ABB2BF;"> =&gt;] </span><span style="color:#E06C75;">$value</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">//循环体</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>max();min();</code><br> 返回数组元素中最大值及最小值。<br><code>count();</code><br> 统计数组元素的个数，参数<code>2</code>传<code>true</code>，递归统计。<br><code>range();</code><br> 返回位于起始元素及终止元素之间的值，组成新的数组，可以设置元素值的步长。<code>range(&#39;a&#39;,&#39;z&#39;,2);</code><br><code>array_merge();</code><br> 合并多个数组，关联数组合并时，若元素下标相同，后面的数组的元素覆盖前面的，索引数组不覆盖。<br><code>array_rand();</code> 随机返回目标数组中指定个数的键名，以数组的形式返回。参数 1 目标数组，参数 2 键个数。<br><code>shuffle();</code><br> 打乱数组<br><code>array_keys();</code><br> 返回数组中元素的键名组成的数组。<br><code>array_values();</code><br> 返回数组中所有元素的值组成的索引数组。<br><code>sort(); </code>| <code>rsort();</code> | <code>asort();</code> | <code>arsort();</code> | <code>ksort();</code> | <code>krsot();</code><br> 对数组元素进行升序排序，r-降序排序，a-排序保持索引，k-按照键名排序</p>`,131),p=[o];function c(r,d){return a(),e("div",null,p)}const B=s(l,[["render",c],["__file","php.html.vue"]]);export{B as default};
