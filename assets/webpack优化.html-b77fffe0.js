import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as l}from"./app-fd217ae5.js";const e={},p=l(`<h2 id="production-模块打包自带优化" tabindex="-1"><a class="header-anchor" href="#production-模块打包自带优化" aria-hidden="true">#</a> production 模块打包自带优化</h2><ol><li><code>tree shaking</code> 打包时移除<code>JS</code>中未引用的代码，依赖于<code>import</code>和<code>export</code>的静态结构特性</li><li><code>scope hoisting</code> 将模块之间的关系进行结果推测，让打包出来的代码文件更小、运行更快</li><li>代码压缩 所有代码使用<code>UglifyJsPlugin</code>插件进行压缩、混淆</li></ol><h2 id="css-优化" tabindex="-1"><a class="header-anchor" href="#css-优化" aria-hidden="true">#</a> CSS 优化</h2><p><code>mini-css-extract-plugin</code>是用于将<code>CSS</code>提取为独立的文件的插件，对每个包含<code>CSS</code>的<code>js</code>文件都会创建一个<code>CSS</code>文件，支持按需加载<code>CSS</code>和<code>sourceMap</code>。异步加载，不重复编译，只针对<code>CSS</code> 安装 <code>-D</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">MiniCssExtractPlugin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;mini-css-extract-plugin&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">MiniCssExtractPlugin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;[name].css&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">    ····</span></span>
<span class="line"><span style="color:#E06C75;">module</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">rules</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">css</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">use</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">MiniCssExtractPlugin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loader</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;css-loader&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">scss</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">use</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">MiniCssExtractPlugin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loader</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;css-loader&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;sass-loader&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动添加-css-前缀" tabindex="-1"><a class="header-anchor" href="#自动添加-css-前缀" aria-hidden="true">#</a> 自动添加 CSS 前缀</h2><p>安装<code>postcss-loader</code> <code>autoprefixer</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">rules</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">css</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">use</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">MiniCssExtractPlugin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loader</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;css-loader&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;postcss-loader&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">scss</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">use</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">MiniCssExtractPlugin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loader</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;css-loader&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;postcss-loader&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;sass-loader&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在根目录新建<code>postcss.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;autoprefixer&#39;</span><span style="color:#ABB2BF;">)],</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css-压缩" tabindex="-1"><a class="header-anchor" href="#css-压缩" aria-hidden="true">#</a> css 压缩</h2><p>安装<code>optimize-css-assets-webpack-plugin</code> <code>terser-webpack-plugin</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">TerserJSPlugin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;terser-webpack-plugin&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">OptimizeCSSAssetsPlugin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;optimize-css-assets-webpack-plugin&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">optimization</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">minimizer</span><span style="color:#ABB2BF;">: [</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">TerserJSPlugin</span><span style="color:#ABB2BF;">({}), </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">OptimizeCSSAssetsPlugin</span><span style="color:#ABB2BF;">({})],</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js-代码分离" tabindex="-1"><a class="header-anchor" href="#js-代码分离" aria-hidden="true">#</a> js 代码分离</h2><p>代码分离可以用于获取更小的<code>bundle</code>，以及控制资源加载优先级</p><ol><li>使用<code>entry</code>配置手动分离代码</li><li>使用<code>SplitChunksPlugin</code>去重和分离<code>chunk</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">optimization</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">splitChunks</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">chunks</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;all&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>动态导入，使用模块的内联函数调用来分离代码，用到那个模块才会加载哪个模块，可以提高<code>SPA</code>首屏加载速度 <code>webpack4</code>默认允许<code>import</code>语法动态导入，但需要<code>babel</code>插件支持 安装<code>@babel/plugin-syntax-dynamic-import</code>，并加入<code>.bablelrc</code>配置文件添加改插件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getComponent</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;jquery&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(({ </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;font-style:italic;">$</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;main&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onload</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;btn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">onclick</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">getComponent</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendTo</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;body&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="splitchunksplugin-默认配置" tabindex="-1"><a class="header-anchor" href="#splitchunksplugin-默认配置" aria-hidden="true">#</a> splitChunksPlugin 默认配置</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">optimization</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">splitChunks</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">chunks</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;async&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 只对异步加载的模块进行拆分，可选值还有all | initial</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">minSize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30000</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 模块最少大于30KB才拆分</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">maxSize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,  </span><span style="color:#7F848E;font-style:italic;">// 模块大小无上限，只要大于30KB都拆分</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">minChunks</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 模块最少引用一次才会被拆分</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">maxAsyncRequests</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 异步加载时同时发送的请求数量最大不能超过5,超过5的部分不拆分</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">maxInitialRequests</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 页面初始化时同时发送的请求数量最大不能超过3,超过3的部分不拆分</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">automaticNameDelimiter</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;~&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 默认的连接符</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 拆分的chunk名,设为true表示根据模块名和CacheGroup的key来自动生成,使用上面连接符连接</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">cacheGroups</span><span style="color:#ABB2BF;">: { </span><span style="color:#7F848E;font-style:italic;">// 缓存组配置,上面配置读取完成后进行拆分,如果需要把多个模块拆分到一个文件,就需要缓存,所以命名为缓存组</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">vendors</span><span style="color:#ABB2BF;">: { </span><span style="color:#7F848E;font-style:italic;">// 自定义缓存组名</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#D19A66;">[</span><span style="color:#56B6C2;">\\\\</span><span style="color:#D19A66;">/]</span><span style="color:#E06C75;">node_modules</span><span style="color:#D19A66;">[</span><span style="color:#56B6C2;">\\\\</span><span style="color:#D19A66;">/]</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 检查node_modules目录,只要模块在该目录下就使用上面配置拆分到这个组</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">priority</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 权重-10,决定了哪个组优先匹配,例如node_modules下有个模块要拆分,同时满足vendors和default组,此时就会分到vendors组,因为-10 &gt; -20</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">: { </span><span style="color:#7F848E;font-style:italic;">// 默认缓存组名</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">minChunks</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 最少引用两次才会被拆分</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">priority</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 权重-20</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">reuseExistingChunk</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 如果主入口中引入了两个模块,其中一个正好也引用了后一个,就会直接复用,无需引用两次</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="noparse" tabindex="-1"><a class="header-anchor" href="#noparse" aria-hidden="true">#</a> noParse</h2><p>在引入一些第三方模块时，我们知道其内部肯定不会依赖其他模块，此时再去解析他们的内部依赖关系是非常浪费时间的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">module</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">noParse</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /jquery/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ignoreplugin" tabindex="-1"><a class="header-anchor" href="#ignoreplugin" aria-hidden="true">#</a> IgnorePlugin</h2><p>在引入一些第三方模块时，内部会做<code>i18n</code>国际化处理，可以忽略语言包，然后按需引入 ① 查看源码，分析可得出<code>locale</code>目录就是<code>moment</code>所依赖的语言包目录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">loadLocale</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">oldLocale</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// TODO: Find a better way to register and load all the locales in Node</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">locales</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;undefined&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">oldLocale</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">globalLocale</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_abbr</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">aliasedRequire</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">require</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">aliasedRequire</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./locale/&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">getSetGlobalLocale</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldLocale</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">locales</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用<code>IgnorePlugin</code>插件来忽略掉<code>moment</code>模块的<code>locale</code>目录 参数 1 表示要忽略的资源路径，参数 2 要忽略的资源 context</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">webpack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">IgnorePlugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\.\\/</span><span style="color:#E06C75;">locale/</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> /moment/</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>按需引入语言包</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">moment</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;moment&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;moment/locale/zh-cn&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">moment</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">locale</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;zh-CN&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">moment</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">subtract</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;days&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">calendar</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dllplugin" tabindex="-1"><a class="header-anchor" href="#dllplugin" aria-hidden="true">#</a> DllPlugin</h2><p>在引入一些第三方模块时，<code>vue</code>/<code>react</code>/<code>angular</code>等框架文件一般都是不会修改的，而每次打包都需要去解析，会影响打包速度，做拆分只提高了上线后用户访问速度，并不会提高构建速度，应该使用动态链接库的方式，借助<code>DllPlugin</code>插件实现将这些框架座位一个个的动态链接库，只构建一次，以后每次构建都只生成自己的业务代码，主要将一些不做修改的依赖文件提前打包</p><h3 id="vue-react-项目中的库抽取成-dll" tabindex="-1"><a class="header-anchor" href="#vue-react-项目中的库抽取成-dll" aria-hidden="true">#</a> vue/react 项目中的库抽取成 Dll</h3><ol><li>在 build 目录新建一个文件<code>webpack.vue.js</code>或<code>webpack.react.js</code> 配置入口：将多个要做成<code>dll</code>的库全放进来 配置出口：一定要设置<code>library</code>属性，将打包好的结果全暴露在全局 配置 plugin：设置打包后<code>dll</code>文件名和 manifest 文件所在地</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;path&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">webpack</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;webpack&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;produce&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">vue</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;vue/dist/vue.js&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;vue-router&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// react: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//   &#39;react&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//   &#39;react-dom&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;[name]_dll.js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../dist&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">library</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;[name]_dll&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">webpack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">DllPlugin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;[name]_dll&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../dist/manifest.json&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在<code>webpack.base.js</code>中进行插件配置，使用<code>DllReferencePlugin</code>指定<code>manifest</code>文件的位置</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">webpack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">DllReferencePlugin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">manifest</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../dist/manifest.json&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>配置插件自动添加<code>script</code>标签到<code>Html</code>中，安装<code>add-asset-html-webpack-plugin</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">AddAssetHtmlWebpackPlugin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">filepath</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../dist/vue_dll.js&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="happypack" tabindex="-1"><a class="header-anchor" href="#happypack" aria-hidden="true">#</a> happypack</h2><p>由于<code>webpack</code>在<code>node</code>环境中运行打包构建，所以是单线程的模式，在打包众多资源时效率会比较低下，早期可以通过<code>Happypack</code>来实现多进程打包。当然，这个问题只出现在低版本的<code>webpack</code>中，现在的<code>webpack</code>性能已经非常强劲了，所以无需使用<code>Happypack</code>也可以实现高性能打包<br> 安装<code>happypack</code>，引入插件修改配置规则，配置插件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">HappyPack</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;happypack&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /.js</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">use</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">loader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;happypack/loader&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">include</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../src&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">exclude</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /node_modules/</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">HappyPack</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">loaders</span><span style="color:#ABB2BF;">: [ </span><span style="color:#98C379;">&#39;babel-loader&#39;</span><span style="color:#ABB2BF;"> ]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浏览器缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存" aria-hidden="true">#</a> 浏览器缓存</h2><p>在做了众多代码分离的优化后，其目的是为了利用浏览器缓存，达到提高访问速度的效果，所以构建项目时做代码分割是必须的，例如将固定的第三方模块抽离，下次修改了业务代码，重新发布上线不重启服务器，用户再次访问服务器就不需要再次加载第三方模块了。如果再次打包上线不重启服务器，客户端会把以前的业务代码和第三方模块同时缓存，再次访问时依旧会访问缓存中的业务代码，所以会导致业务代码也无法更新，需要在<code>output</code>节点的<code>filename</code>中使用<code>placeholder</code>语法，根据代码内容生成文件名的<code>hash</code>，之后每次打包业务代码时，如果有改变，会生成新的<code>hash</code>作为文件名，浏览器就不会使用缓存了，而第三方模块不会重新打包生成新的名字，则会继续使用缓存</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;../dist/&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;[name].[contenthash:8].bundle.js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">publicPath</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包分析 安装<code>webpack-bundle-analyzer -D</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">BundleAnalyzerPlugin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;webpack-bundle-analyzer&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">BundleAnalyzerPlugin</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">BundleAnalyzerPlugin</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prefetching-和-preloading" tabindex="-1"><a class="header-anchor" href="#prefetching-和-preloading" aria-hidden="true">#</a> Prefetching 和 Preloading</h2><p>在<code>Chrome</code>浏览器控制台<code>ctrl+shift+p</code>，查找<code>coverage</code>，可查看覆盖率<br> 在懒加载时使用魔法注释<code>Prefetching</code>，在首页资源加载完毕后空闲时将动态导入的资源加载进来，这样可以提高首屏加载速度，也可以解决懒加载可能会影响用户体验的问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getComponent</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/* webpackPrefetch: true */</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;jquery&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(({ </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;font-style:italic;">$</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我是main&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),o=[p];function c(r,B){return n(),a("div",null,o)}const d=s(e,[["render",c],["__file","webpack优化.html.vue"]]);export{d as default};
