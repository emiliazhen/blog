import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,a as l}from"./app-fd217ae5.js";const e={},t=l(`<h2 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符" aria-hidden="true">#</a> 元字符</h2><p>默认情况下一个元字符匹配一个字符</p><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">数字</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">非数字</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">字符[0-9a-zA-Z_]不包括空白字符</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">非..</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">空白字符 空格回车换行</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">非..</td></tr><tr><td style="text-align:left;">.</td><td style="text-align:left;">除了换行以外所有的字符</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">限制开头</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">限制结尾</td></tr></tbody></table><h2 id="量词" tabindex="-1"><a class="header-anchor" href="#量词" aria-hidden="true">#</a> 量词</h2><p>修饰前面一个字符出现的次数</p><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">*</td><td style="text-align:left;">出现 0 或多次</td></tr><tr><td style="text-align:left;">+</td><td style="text-align:left;">出现 1 或多次</td></tr><tr><td style="text-align:left;">？</td><td style="text-align:left;">出现 0 或 1 次</td></tr><tr><td style="text-align:left;">{n}</td><td style="text-align:left;">出现 n 次</td></tr><tr><td style="text-align:left;">{n,}</td><td style="text-align:left;">出现 n 次或多次</td></tr><tr><td style="text-align:left;">{n,m}</td><td style="text-align:left;">出现 n 次到 m 次</td></tr></tbody></table><h2 id="中括号" tabindex="-1"><a class="header-anchor" href="#中括号" aria-hidden="true">#</a> 中括号</h2><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">[abc]</td><td style="text-align:left;">匹配一个字符，中括号中的内容都是或的关系</td><td style="text-align:left;">这个字符可以是 a 或 b 或 c</td></tr><tr><td style="text-align:left;">[0-9]</td><td style="text-align:left;">匹配一个范围</td><td style="text-align:left;">匹配一个字符，0-9 之间的数都可以</td></tr><tr><td style="text-align:left;">[a-z0-9]</td><td style="text-align:left;">匹配一个范围</td><td style="text-align:left;">匹配一个字符，0-9 或 a-z 都可以</td></tr><tr><td style="text-align:left;">[^abc]</td><td style="text-align:left;">在中括号中可以取反</td><td style="text-align:left;">匹配一个字符，该字符是非 a 或非 b 或非 c</td></tr></tbody></table><h2 id="小括号" tabindex="-1"><a class="header-anchor" href="#小括号" aria-hidden="true">#</a> 小括号</h2><p>提高优先级 <code>|</code> 或 <code>s(u|o)n </code>：匹配 son 或 sun</p><h2 id="转义符" tabindex="-1"><a class="header-anchor" href="#转义符" aria-hidden="true">#</a> 转义符</h2><p><code>\\</code></p><h2 id="js-中创建正则表达式对象" tabindex="-1"><a class="header-anchor" href="#js-中创建正则表达式对象" aria-hidden="true">#</a> JS 中创建正则表达式对象</h2><h3 id="构造函数创建" tabindex="-1"><a class="header-anchor" href="#构造函数创建" aria-hidden="true">#</a> 构造函数创建</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">regex</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">RegExp</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="字面量创建" tabindex="-1"><a class="header-anchor" href="#字面量创建" aria-hidden="true">#</a> 字面量创建</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">regex</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /abc/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="匹配" tabindex="-1"><a class="header-anchor" href="#匹配" aria-hidden="true">#</a> 匹配</h2><p>判断字符串是否满足正则表达式的规则</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">regex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;aaa&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="onchange-事件" tabindex="-1"><a class="header-anchor" href="#onchange-事件" aria-hidden="true">#</a> onchange 事件</h2><p>当失去焦点并且内容发生改变时才会触发</p><h2 id="exec-提取" tabindex="-1"><a class="header-anchor" href="#exec-提取" aria-hidden="true">#</a> exec() 提取</h2><p>正则表达式对象的方法 执行一次会将正则匹配到的一个字符串放入数组，并返回，开启全局匹配后调用一次，会往后找一个，每次只会找到一个匹配的字符串 如果需要提取一个字符串中所有符合条件的字符串，需要配合循环来使用，不推荐使用<code>exec()</code>，建议使用字符串的方法：<code>match()</code>;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;张三：2500，李四：3000，王五：50000&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// var reg = /\\d+/gi; // gi 全局匹配并且忽略大小写</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reg</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /\\d</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span></span>
<span class="line"><span style="color:#C678DD;">do</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">// 类型是string</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match();</h2><p><code>String</code>对象的方法 与<code>exec()</code>方法不同，如果开启全局匹配，调用一次会把所有满足条件的字符串提取出来放入一个数组 如果需要提取所有满足条件的字符串，建议使用该方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;2323@xx.com,tmf@wref.cn其他 2490ef@chinatower.com.cn&#39;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reg</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /\\w</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">@\\w</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reg</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分组提取" tabindex="-1"><a class="header-anchor" href="#分组提取" aria-hidden="true">#</a> 分组提取</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">dateStr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;2018-3-12&#39;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reg</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /(\\d</span><span style="color:#D19A66;">{4}</span><span style="color:#E06C75;">)-(\\d</span><span style="color:#D19A66;">{1,2}</span><span style="color:#E06C75;">)-(\\d</span><span style="color:#D19A66;">{1,2}</span><span style="color:#E06C75;">)/</span></span>
<span class="line"><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dateStr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dateStr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">dateStr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reg</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">RegExp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">RegExp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">RegExp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split()</h2><p>切割，根据正则表达式来规定分隔符进行切割</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;xxx@sina.com&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#D19A66;">[@</span><span style="color:#E06C75;">.</span><span style="color:#D19A66;">]</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">//[&quot;xxx&quot;,&quot;sina&quot;,&quot;com&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="贪婪模式和非贪婪模式" tabindex="-1"><a class="header-anchor" href="#贪婪模式和非贪婪模式" aria-hidden="true">#</a> 贪婪模式和非贪婪模式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&lt;div&gt;aaa&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/&lt;.</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">&gt;/</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [&quot;&lt;div&gt;aaa&lt;/div&gt;&quot;]</span></span>
<span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/&lt;.</span><span style="color:#D19A66;">+?</span><span style="color:#E06C75;">&gt;/</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// [&quot;&lt;div&gt;&quot;,&quot;&lt;/div&gt;&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),o=[t];function p(r,c){return a(),n("div",null,o)}const B=s(e,[["render",p],["__file","正则表达式.html.vue"]]);export{B as default};
