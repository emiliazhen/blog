import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,a as n}from"./app-fd217ae5.js";const l={},o=n(`<h2 id="web-端的-javascript-的组成" tabindex="-1"><a class="header-anchor" href="#web-端的-javascript-的组成" aria-hidden="true">#</a> web 端的 JavaScript 的组成</h2><p>ECMAScript + BOM + DOM<br> ECMAScript 是一套规范,规定了 JavaScript 的语法是怎样的</p><h2 id="js-在-html-中的书写位置" tabindex="-1"><a class="header-anchor" href="#js-在-html-中的书写位置" aria-hidden="true">#</a> JS 在 HTML 中的书写位置</h2><ol><li>直接写在 script 标签中</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// js代码</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>引入外部的 JS 文件,script 标签的 src 属性: 指定外部 JS 文件的路径</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;js/random1.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意: 如果引入了外部的 JS 文件,当前 script 标签中就不能写 JS 代码了,如果需要在当前页面继续写 JS 代码,可以另开一个 script 标签</p></blockquote><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>就是内存中的一个标识符, 可以通过这个标识符找到内存中的一片空间, 更方便的操作内存中的数据；<br> 在 JS 中申明变量:<code>var</code> 关键字</p><h3 id="打印方法" tabindex="-1"><a class="header-anchor" href="#打印方法" aria-hidden="true">#</a> 打印方法</h3><p>将变量内容输出到控制台</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello ! &#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// hello !</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名规则和规范" tabindex="-1"><a class="header-anchor" href="#命名规则和规范" aria-hidden="true">#</a> 命名规则和规范</h3><p>规则:</p><ul><li>由字母 数字 _ $ 组成, 不能以数字开头</li><li>不能是关键字或保留字,例如: var</li><li>区分大小写,声明时用大写,使用时就得用大写</li></ul><p>规范:</p><ul><li>见名知意,起名字必须要有意义</li><li>驼峰命名法</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>JS 是一门 <code>弱类型</code> 的语言<br> 弱类型: 声明变量时不需要指定具体的数据类型</p><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">基本数据类型 (简单类型)</td><td style="text-align:left;">number, string, boolean, undefined, null</td></tr><tr><td style="text-align:left;">引用数据类型 (复杂类型)</td><td style="text-align:left;">除了基本数据类型外的所有数据</td></tr></tbody></table><h3 id="number-类型" tabindex="-1"><a class="header-anchor" href="#number-类型" aria-hidden="true">#</a> number 类型</h3><h4 id="数值范围" tabindex="-1"><a class="header-anchor" href="#数值范围" aria-hidden="true">#</a> 数值范围:</h4><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">Number.MAX_VALUE</td><td style="text-align:left;">最大值 正数</td></tr><tr><td style="text-align:left;">Number.MIN_VALUE</td><td style="text-align:left;">最小值 正数 无限接近于 0 的小数</td></tr><tr><td style="text-align:left;">Infinity</td><td style="text-align:left;">无限大</td></tr></tbody></table><h4 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5e-324</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 科学计数法 5 乘以 10 的-324 次方</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数</p><h4 id="数值判断" tabindex="-1"><a class="header-anchor" href="#数值判断" aria-hidden="true">#</a> 数值判断</h4><table><thead><tr><th style="text-align:left;"> </th><th style="text-align:left;"> </th></tr></thead><tbody><tr><td style="text-align:left;">NaN</td><td style="text-align:left;">not a number</td></tr><tr><td style="text-align:left;">NaN</td><td style="text-align:left;">是 <code>number</code> 类型, 当运算后不是一个 <code>number</code> 类型的数, 例如 <code>1 * &#39;a&#39;</code></td></tr><tr><td style="text-align:left;">isNaN()</td><td style="text-align:left;">是 非数字 吗? 如果不是一个数字返回 <code>true</code>, 如果是一个数字返回 <code>false</code></td></tr></tbody></table><h3 id="string-类型" tabindex="-1"><a class="header-anchor" href="#string-类型" aria-hidden="true">#</a> string 类型</h3><h4 id="转义符" tabindex="-1"><a class="header-anchor" href="#转义符" aria-hidden="true">#</a> 转义符</h4><p>反斜杠 <code>\\</code> 将字符本身的含义进行转换,比如将具有特殊含义的字符转成普通字符, <code>\\&quot;</code> 将双引号转为普通的字符串双引号</p><h4 id="长度" tabindex="-1"><a class="header-anchor" href="#长度" aria-hidden="true">#</a> 长度</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;hehe&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="拼接" tabindex="-1"><a class="header-anchor" href="#拼接" aria-hidden="true">#</a> 拼接</h4><p>凡是和字符串用 + 相连接的情况,都是字符串拼接</p><h3 id="boolean-类型" tabindex="-1"><a class="header-anchor" href="#boolean-类型" aria-hidden="true">#</a> boolean 类型</h3><p>Boolean 字面量： <code>true</code> 和 <code>false</code> 计算机内部存储：<code>true</code> 为 1，<code>false</code> 为 0 <code>undefined</code> 类型和 <code>null</code> 类型</p><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> undefined</h3><p>表示变量声明了,但是没有赋值</p><h3 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> null</h3><p>表示空,没有</p><h2 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h2><p><code>typeof</code>获取变量的数据类型</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><h3 id="其他数据类型转-string" tabindex="-1"><a class="header-anchor" href="#其他数据类型转-string" aria-hidden="true">#</a> 其他数据类型转 string</h3><ol><li>toString(), undefined 和 null 没有 toString()</li><li>String()</li><li>字符串拼接, 推荐, 因为没有类型的限制, 所有类型转为 string 都可以直接拼接一个空字符串 &quot;&quot;</li></ol><h3 id="将其他类型转为-number-类型" tabindex="-1"><a class="header-anchor" href="#将其他类型转为-number-类型" aria-hidden="true">#</a> 将其他类型转为 number 类型</h3><ol><li><p><code>Number()</code> 不常用 非数字字符串,不可以转换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;abc&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// --&gt; NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>纯数字字符串,可以转换:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;123&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// --&gt; 123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>boolean 类型,可以转换:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// --&gt; 1 true 就是 1 false 就是 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数字加字符串混合的字符串,不可以转换:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;120px&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// --&gt; NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>parseInt()</code>掌握,经常使用 非数字字符串,不可以转换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;abc&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// --&gt; NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>纯数字字符串,可以转换:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;123&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// --&gt; 123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>boolean 类型,不可以转换:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// --&gt; NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数字加字符串混合的字符串,可以转换:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;120px&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// --&gt; 120 当遇到字符串就停止,直接返回前面的数字</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>parseFloat()</code> 用法与 parseInt()一样, 区别在于, 如果字符串中有小数, parseFloat()会取小数进行转换, 而 parseInt()只保留了整数</p></li><li><p>使用数学中的正负号 只适合纯数字的字符串或 <code>boolean</code> 类型, 不推荐使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;123&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">;</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">str</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="将其他类型转为-boolean" tabindex="-1"><a class="header-anchor" href="#将其他类型转为-boolean" aria-hidden="true">#</a> 将其他类型转为 boolean</h3><p><code>Boolean()</code> 不常用 有以下几种情况转为 boolean 类型是 <code>false</code>:<br><code>&#39; &#39;</code> <code>0</code> <code>NaN</code> <code>undefined</code> <code>null</code></p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><p><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></p><h3 id="一元运算符" tabindex="-1"><a class="header-anchor" href="#一元运算符" aria-hidden="true">#</a> 一元运算符</h3><p><code>++</code> : 自增一<br><code>--</code> : 自减一</p><h4 id="前置和后置的区别" tabindex="-1"><a class="header-anchor" href="#前置和后置的区别" aria-hidden="true">#</a> 前置和后置的区别:</h4><p>后置: 先返回值,再自增 前置: 先自增一, 再返回自增后的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">num1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#E06C75;">num1</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 后置</span></span>
<span class="line"><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">num1</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 前置</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p><code>&amp;</code> 与 <code>|</code> 或 <code>!</code> 非</p><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><p><code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code> <code>==</code> <code>===</code> <code>!=</code> <code>!==</code></p><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><p><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></p>`,65),t=[o];function r(p,c){return a(),e("div",null,t)}const B=s(l,[["render",r],["__file","js.html.vue"]]);export{B as default};
