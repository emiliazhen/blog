import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as l}from"./app-fd217ae5.js";const e={},o=l(`<p><code>Vue</code> 是基于 <code>M(数据)</code> <code>V(视图)</code> <code>VM(调度者)</code>这种设计模式开发出来的一个框架 <code>双向通信</code><code>mvc(控制)</code> <code>单向通信</code> 数据变化交给控制处理才能视图变化</p><h2 id="基本编码步骤" tabindex="-1"><a class="header-anchor" href="#基本编码步骤" aria-hidden="true">#</a> 基本编码步骤</h2><ol><li>引入<code>vue.js</code></li><li>在 script 标签部分创建一个 Vue 实例</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#app&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//通过选择器找到一个让vm实例监管的区域</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">              </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">             </span><span style="color:#61AFEF;">handler</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">                  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在 HTML 结构部分书写 Vue 代码</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;{{message}}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>v-text 将文本渲染到指定元素中</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-text</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>v-html 将数据解释为 Html</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-html</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="v-bind-动态绑定属性" tabindex="-1"><a class="header-anchor" href="#v-bind-动态绑定属性" aria-hidden="true">#</a> <code>v-bind </code>动态绑定属性</h2><p><code>v-bind:属性名=&quot;data里面的属性&quot;</code> 简写为<code>:加属性名</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">img</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">imgDataSrc</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#98C379;">&#39;del.php?id=&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">[{ </span><span style="color:#E06C75;">btn</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;">active</span><span style="color:#ABB2BF;">]</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-for-循环渲染元素" tabindex="-1"><a class="header-anchor" href="#v-for-循环渲染元素" aria-hidden="true">#</a> <code>v-for</code> 循环渲染元素</h2><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">key</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{item}}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{item.name}} : {{item.age}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{item.name}}:{{item.age}} {{index}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{value}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;{{key}}:{{value}}{{index}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>:key</code>需要绑定一个唯一值；提升<code>v-for</code>渲染效率，只会重新渲染更改的项</p><h2 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> <code>V-model</code></h2><p>数组<code>length</code>属性改变数组和使用数组下标的方式去改变数组不会触发视图更新<br><code>Vue.set(arr,index,newVal)</code>要改的数组，要改的项，更改后的新值<br><code>Array.prototype.splice()</code><code>v-model</code>指令用来双向数据绑定，就是<code>model</code>和<code>view</code>中的值进行同步变化<br><code>v-model</code>只能在<code>input/textarea/select</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">newName</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="v-on-监听-dom-事件" tabindex="-1"><a class="header-anchor" href="#v-on-监听-dom-事件" aria-hidden="true">#</a> <code>v-on</code> 监听 <code>dom</code> 事件</h2><p><code>v-on:任意的事件类型=&quot;执行的函数&quot;</code> 简写 <code>@任意的事件类型=&quot;执行的函数&quot;</code> 函数定义在<code>Vue</code>实例的<code>methods:{..}</code>中 <code>methods:{ changeMsg(){this.name = &quot;..&quot;}}</code><br> 通过执行函数中添加$event参数传递事件对象 <code>@click=&quot;getEvent($event)&quot;</code> 事件修饰符可以给事件添加特殊功能<code>.stop</code> <code>.prevent</code> <code>.once</code> <code>.self</code><br> 按键相关的事件添加按键修饰符<code>.enter</code> <code>.tab</code> <code>.delete</code> <code>.left</code> <code>.down</code> <code> @keyup.enter=&quot;foo&quot;</code></p><h2 id="v-if-和-v-show" tabindex="-1"><a class="header-anchor" href="#v-if-和-v-show" aria-hidden="true">#</a> <code>v-if</code> 和 <code>v-show</code></h2><p>可以用来控制元素的显示和隐藏，<code>v-if=&quot;boolean&quot;</code> <code>v-show=&quot;boolean&quot;</code></p><ul><li><code>v-if</code>通过控制<code>dom</code>来控制元素的显示和隐藏，会造成浏览器重排</li><li><code>v-show</code>通过控制样式<code>display:none</code>来控制元素显示和隐藏，会触发浏览器重绘 涉及大量<code>dom</code>操作的时候需要用<code>v-show</code>，涉及到异步数据渲染的时候用<code>v-if</code></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;A&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">v-else-if</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;B&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">v-else</span><span style="color:#ABB2BF;">&gt;C&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-cloak" tabindex="-1"><a class="header-anchor" href="#v-cloak" aria-hidden="true">#</a> <code>v-cloak</code></h2><p>在样式部分写入 <code>[v-cloak]{display:none};</code>并在闪烁标签<code>v-clock</code>;<br> 当<code>vue</code>实例结束编译之后<code>v-clock</code>会被删除</p><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> <code>ref</code></h2><p>在标签上绑定一个<code>ref=&quot;xx&quot;</code>，然后在<code>mounted</code>函数中<code>this.$refs.xx</code>操作<code>dom</code></p><h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h2><p>指令能够帮助开发者操作<code>DOM</code>，当系统指令不能够满足需求时，就可以使用自定义指令进行<code>DOM</code>操作；将操作<code>DOM</code>的方式封装成指令后首先可以重复使用，其次封装成指令的过程是<code>vue</code>内部提供的方法，这些方法在性能上比直接操作<code>DOM</code>元素要高</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">directive</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xx&#39;</span><span style="color:#ABB2BF;">,{</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">inserted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">binding</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">     ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义指令名称，配置对象<br> 钩子函数是系统定义的函数，会自动执行。 <code>inserted</code>在插入到<code>DOM</code>时候自动执行 使用时<code>v-xx=&quot;cc&quot;</code> 插入到元素标签</p><ul><li><code>el</code>是指令所在的元素对象</li><li><code>binding</code>是一个对象</li><li><code>binding.value</code>自定义指令对应的指令值(指令值是一个表达式)是该表达式的值</li><li><code>binding.expression</code>指令等号后面的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">directives</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#98C379;">&#39;todo-focus&#39;</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">bind</span><span style="color:#ABB2BF;">){...} </span><span style="color:#7F848E;font-style:italic;">//在自定义指令绑定到DOM元素上面就会自动执行，是在内存中指令挂载到DOM对象时会自动执行</span></span>
<span class="line"><span style="color:#61AFEF;">inserted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">binding</span><span style="color:#ABB2BF;">){..}</span><span style="color:#7F848E;font-style:italic;">//当指令所在的元素插入到DOM节点时会自动执行</span></span>
<span class="line"><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">binding</span><span style="color:#ABB2BF;">){..} </span><span style="color:#7F848E;font-style:italic;">//当指令所绑定的数据发生变化时会自动执行</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>directives:{bind(el,bind){..},update(el,binding){..}}</code> 简写 <code>directives:function(el,binding){...}</code></p><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">Vue.filter(&#39;xx&#39;, function (a, b) {})</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数<code>1</code>过滤器名字，</li><li>参数<code>2</code>处理函数，其中默认<code>a</code>为过滤的原始数据,函数需要<code>return</code>返回处理好的数据</li><li>在需要过滤的数据后面加上管道符<code>|</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{ item.name | </span><span style="color:#61AFEF;">xx</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) }</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>过滤器只能在差值表达式中使用，<code>v-bind=&#39;index | fmtIndex&#39;</code></li></ul><h2 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">:{ </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(){ </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> ..}}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>这里的<code>foo</code>就是一个计算属性，他是一个函数，但这个函数可以当成属性来使用</li><li>函数名就是属性名</li><li>属性值是函数的返回值</li><li>计算属性的值会根据函数内部依赖的其他属性产生变化</li><li>计算属性具有缓存</li></ul><h2 id="watch-监听" tabindex="-1"><a class="header-anchor" href="#watch-监听" aria-hidden="true">#</a> <code>watch</code> 监听</h2><ul><li>用来监听<code>data</code>中数据的值，只要监听的数据一变化，它就能执行相应的函数</li><li>创建监听异步操作的时候，就要用到<code>watch</code></li><li><code>watch</code>里面的函数函数名很特殊，是需要监听的 <code>data</code> 的名字，函数参数<code>newVal</code>和<code>oldVal</code></li><li>在使用前端路由的时候只能用<code>watch</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">:{</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">:{</span><span style="color:#61AFEF;">handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">oldVal</span><span style="color:#ABB2BF;">){...},</span><span style="color:#E06C75;">deep</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">}}  </span><span style="color:#7F848E;font-style:italic;">// 深度监听</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h2><h3 id="axios" tabindex="-1"><a class="header-anchor" href="#axios" aria-hidden="true">#</a> <code>axios</code></h3><p>引入 <code>js</code> 后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/user?id=&#39;</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">){..}).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){..})</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/user/..&#39;</span><span style="color:#ABB2BF;">,{</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;xx&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;xxx&#39;</span><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">){..}).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){..})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue-resourc-不推荐" tabindex="-1"><a class="header-anchor" href="#vue-resourc-不推荐" aria-hidden="true">#</a> <code>vue-resourc</code>(不推荐)</h3><p>引入 <code>js</code> 后</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://..&#39;</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">可选参数对象</span><span style="color:#ABB2BF;">,{</span><span style="color:#E06C75;">传参</span><span style="color:#ABB2BF;">}]).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(..)</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://..&#39;</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">可选参数对象</span><span style="color:#ABB2BF;">,{</span><span style="color:#E06C75;">传参</span><span style="color:#ABB2BF;">}]).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(..)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决跨域方案" tabindex="-1"><a class="header-anchor" href="#解决跨域方案" aria-hidden="true">#</a> 解决跨域方案</h3><p><code>jsonp</code> 需要前后端配合，<code>jsonp</code>本质上发出的是<code>get</code>请求 <code>cors</code> 只需要后端进行相关配置就可以解决跨域 <code>代理</code> 只需要前端自己搭建代理服务器即可解决跨域</p><h2 id="transition" tabindex="-1"><a class="header-anchor" href="#transition" aria-hidden="true">#</a> <code>transition</code></h2><p><code>transiton</code>过渡动画只能控制元素在显示和隐藏切换时的过渡效果</p><h3 id="方法一-transition-结合-css" tabindex="-1"><a class="header-anchor" href="#方法一-transition-结合-css" aria-hidden="true">#</a> 方法一：transition 结合 css</h3><ol><li>给 <code>v-if</code> 或 <code>v-show</code> 的元素用<code>&lt;transition name=&quot;xx&quot;&gt;&lt;/transition&gt;</code>包裹起来</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;slide&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;span v-if=&quot;isshow&quot;&gt;hello&lt;/span&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 <code>style</code> 中写样式 <code>v-enter-active</code>,<code>v-enter</code>,<code>v-enter-to</code>;若有 <code>name</code> 属性则将 <code>v-</code>换成 <code>xx-</code></li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 控制整个动画的执行过程 */</span></span>
<span class="line"><span style="color:#D19A66;">.slide-enter-active</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">.slide-leave-active</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  transition: </span><span style="color:#D19A66;">all</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 设定动画出现的起始位置和动画离开的结束位置 */</span></span>
<span class="line"><span style="color:#D19A66;">.slide-enter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">.slide-leave-to</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  padding-left: </span><span style="color:#D19A66;">100</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 设定动画离开的起始位置，和动画进入的结束位置 */</span></span>
<span class="line"><span style="color:#D19A66;">.slide-enter-to</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">.slide-leave</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  padding-left: </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二：</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./animate.css&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">enter-active-class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;animated fadeInRight&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">leave-active-class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;animated fadeOutRight&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;div v-if=&quot;isshow&quot;&gt;hello&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法三" tabindex="-1"><a class="header-anchor" href="#方法三" aria-hidden="true">#</a> 方法三：</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">before-enter</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">beforeEnter</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">enter</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">enter</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">after-enter</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">afterEnter</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">before-leave</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">beforeLeave</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">leave</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">leave</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">after-leave</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">afterLeave</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;div v-show=&quot;isShow&quot;&gt;哈哈哈&lt;/div&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//----vue ---</span></span>
<span class="line"><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#61AFEF;">beforeEnter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">transform</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;translateX(200px)&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">     },</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#61AFEF;">enter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">offsetWidth</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">transform</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;translateX(0)&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">transition</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;all 2s ease&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">done</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">afterEnter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">         </span><span style="color:#E5C07B;">el</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">   ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>beforeEnter(){}</code> 设置动画执行的初始状态 <code>enter(el,done){ .. ; done()}</code></p><ul><li>先调用<code>el.offsetWidth</code>或<code>el.offsetHeight..</code>可以让浏览器重绘</li><li>设置动画结束时候的状态</li><li>设置动画执行效果</li><li>显示调用<code>done();</code></li></ul><p><code>afterEnter(){}</code> 动画执行完后调用的函数</p><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> <code>$set()</code></h2><p>vue2.0 给 data 对象新增属性，并触发视图更新 受<code>ES5</code>的限制，<code>Vue.js</code>不能检测到对象属性的添加或删除，<code>Vue.js</code>在初始化实例时将属性为<code>getter/setter</code>所以属性必须在<code>data</code>对象上才能让<code>Vue.js</code>转换它，才能让它是响应的 使用<code>$set()</code>方法，既可以新增属性，又可以触发视图更新</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;key&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> <code>$nextTick</code></h2><p>在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法获取更新后的 DOM</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {...})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,77),p=[o];function c(t,r){return n(),a("div",null,p)}const d=s(e,[["render",c],["__file","开始.html.vue"]]);export{d as default};
